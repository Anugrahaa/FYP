Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OPENBLOCK
    CLOSEBLOCK

Grammar

Rule 0     S' -> start
Rule 1     start -> PROBLEM ID newline program
Rule 2     program -> statement
Rule 3     newline -> NEWLINE newline
Rule 4     newline -> NEWLINE
Rule 5     statement -> block
Rule 6     statement -> ifstatement
Rule 7     statement -> whilestatement
Rule 8     statement -> dowhilestatement
Rule 9     statement -> CONTINUE newline
Rule 10    statement -> BREAK newline
Rule 11    statement -> returnstatement
Rule 12    statement -> simplestatement
Rule 13    statement -> empty
Rule 14    statement -> newline
Rule 15    block -> statement
Rule 16    block -> statement block
Rule 17    ifstatement -> IF OPENPARAM expression CLOSEPARAM statement
Rule 18    ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement
Rule 19    whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement
Rule 20    dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline
Rule 21    returnstatement -> RETURN expression newline
Rule 22    simplestatement -> decs
Rule 23    simplestatement -> expression
Rule 24    decs -> dec newline decs
Rule 25    decs -> dec newline
Rule 26    dec -> vardec
Rule 27    dec -> arraydec
Rule 28    dec -> functiondec
Rule 29    dec -> functiondefn
Rule 30    dec -> structuredec
Rule 31    vardec -> type iddec
Rule 32    iddec -> ID newline
Rule 33    iddec -> ID COMMA iddec
Rule 34    iddec -> ID EQUALS literal newline
Rule 35    iddec -> ID EQUALS literal COMMA iddec
Rule 36    arraydec -> ARRAY type ID newline
Rule 37    arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
Rule 38    functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM
Rule 39    functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
Rule 40    paramlist -> type ID
Rule 41    paramlist -> type ID COMMA paramlist
Rule 42    paramlist -> empty
Rule 43    functiondefn -> functiondec newline BEGIN block returnstatement END newline
Rule 44    structuredec -> STRUCTURE ID newline BEGIN newline decs END newline
Rule 45    literal -> STRINGLITERAL
Rule 46    literal -> INTEGERLITERAL
Rule 47    literal -> CHARLITERAL
Rule 48    literal -> DECIMALLITERAL
Rule 49    literal -> TRUE
Rule 50    literal -> FALSE
Rule 51    literalslist -> literal
Rule 52    literalslist -> literal COMMA literalslist
Rule 53    expression -> expression INCREMENT
Rule 54    expression -> expression DECREMENT
Rule 55    expression -> unaryop expression
Rule 56    expression -> indexaccess
Rule 57    expression -> memberaccess
Rule 58    expression -> functioncall
Rule 59    expression -> OPENPARAM expression CLOSEPARAM
Rule 60    expression -> expression biop expression
Rule 61    expression -> primaryexpression
Rule 62    expression -> expression newline
Rule 63    unaryop -> INCREMENT
Rule 64    unaryop -> DECREMENT
Rule 65    unaryop -> NOT
Rule 66    unaryop -> PLUS
Rule 67    unaryop -> MINUS
Rule 68    unaryop -> PERCENTAGE
Rule 69    biop -> MULTIPLY
Rule 70    biop -> DIVIDE
Rule 71    biop -> MODULO
Rule 72    biop -> PLUS
Rule 73    biop -> MINUS
Rule 74    biop -> AND
Rule 75    biop -> OR
Rule 76    biop -> LT
Rule 77    biop -> GT
Rule 78    biop -> LTE
Rule 79    biop -> GTE
Rule 80    biop -> EQUALCOMPARISON
Rule 81    biop -> NOTEQUALS
Rule 82    indexaccess -> expression OPENARRAY expression CLOSEARRAY
Rule 83    memberaccess -> expression OF ID
Rule 84    functioncall -> ID OPENPARAM callarguments CLOSEPARAM
Rule 85    callarguments -> ID
Rule 86    callarguments -> literalslist
Rule 87    callarguments -> ID COMMA callarguments
Rule 88    callarguments -> literalslist COMMA callarguments
Rule 89    primaryexpression -> literal
Rule 90    primaryexpression -> ID
Rule 91    type -> INTEGER
Rule 92    type -> CHAR
Rule 93    type -> STRING
Rule 94    type -> BOOLEAN
Rule 95    type -> DECIMAL
Rule 96    empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
ARRAY                : 36 37
BEGIN                : 43 44
BOOLEAN              : 94
BREAK                : 10
CHAR                 : 92
CHARLITERAL          : 47
CLOSEARRAY           : 37 82
CLOSEBLOCK           : 
CLOSEPARAM           : 17 18 19 20 38 39 59 84
COMMA                : 33 35 41 52 87 88
CONTINUE             : 9
DECIMAL              : 95
DECIMALLITERAL       : 48
DECREMENT            : 54 64
DIVIDE               : 70
DO                   : 20
ELSE                 : 18
END                  : 43 44
EQUALCOMPARISON      : 80
EQUALS               : 34 35 37
FALSE                : 50
FUNCTION             : 38 39
GT                   : 77
GTE                  : 79
ID                   : 1 32 33 34 35 36 37 38 39 40 41 44 83 84 85 87 90
IF                   : 17 18
INCREMENT            : 53 63
INTEGER              : 91
INTEGERLITERAL       : 46
LT                   : 76
LTE                  : 78
MINUS                : 67 73
MODULO               : 71
MULTIPLY             : 69
NEWLINE              : 3 4
NOT                  : 65
NOTEQUALS            : 81
OF                   : 83
OPENARRAY            : 37 82
OPENBLOCK            : 
OPENPARAM            : 17 18 19 20 38 39 59 84
OR                   : 75
PERCENTAGE           : 68
PLUS                 : 66 72
PROBLEM              : 1
RETURN               : 21
STRING               : 93
STRINGLITERAL        : 45
STRUCTURE            : 44
TRUE                 : 49
WHILE                : 19 20
error                : 

Nonterminals, with rules where they appear

arraydec             : 27
biop                 : 60
block                : 5 16 43
callarguments        : 84 87 88
dec                  : 24 25
decs                 : 22 24 44
dowhilestatement     : 8
empty                : 13 42
expression           : 17 18 19 20 21 23 53 54 55 59 60 60 62 82 82 83
functioncall         : 58
functiondec          : 28 43
functiondefn         : 29
iddec                : 31 33 35
ifstatement          : 6
indexaccess          : 56
literal              : 34 35 51 52 89
literalslist         : 37 52 86 88
memberaccess         : 57
newline              : 1 3 9 10 14 19 20 21 24 25 32 34 36 37 39 43 43 44 44 44 62
paramlist            : 38 39 41
primaryexpression    : 61
program              : 1
returnstatement      : 11 43
simplestatement      : 12
start                : 0
statement            : 2 15 16 17 18 18 19 20
structuredec         : 30
type                 : 31 36 37 40 41
unaryop              : 55
vardec               : 26
whilestatement       : 7

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROBLEM ID newline program

    PROBLEM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROBLEM . ID newline program

    ID              shift and go to state 3


state 3

    (1) start -> PROBLEM ID . newline program
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 5

state 4

    (3) newline -> NEWLINE . newline
    (4) newline -> NEWLINE .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    CONTINUE        reduce using rule 4 (newline -> NEWLINE .)
    BREAK           reduce using rule 4 (newline -> NEWLINE .)
    IF              reduce using rule 4 (newline -> NEWLINE .)
    WHILE           reduce using rule 4 (newline -> NEWLINE .)
    DO              reduce using rule 4 (newline -> NEWLINE .)
    RETURN          reduce using rule 4 (newline -> NEWLINE .)
    OPENPARAM       reduce using rule 4 (newline -> NEWLINE .)
    INCREMENT       reduce using rule 4 (newline -> NEWLINE .)
    DECREMENT       reduce using rule 4 (newline -> NEWLINE .)
    NOT             reduce using rule 4 (newline -> NEWLINE .)
    PLUS            reduce using rule 4 (newline -> NEWLINE .)
    MINUS           reduce using rule 4 (newline -> NEWLINE .)
    PERCENTAGE      reduce using rule 4 (newline -> NEWLINE .)
    ID              reduce using rule 4 (newline -> NEWLINE .)
    ARRAY           reduce using rule 4 (newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (newline -> NEWLINE .)
    STRUCTURE       reduce using rule 4 (newline -> NEWLINE .)
    STRINGLITERAL   reduce using rule 4 (newline -> NEWLINE .)
    INTEGERLITERAL  reduce using rule 4 (newline -> NEWLINE .)
    CHARLITERAL     reduce using rule 4 (newline -> NEWLINE .)
    DECIMALLITERAL  reduce using rule 4 (newline -> NEWLINE .)
    TRUE            reduce using rule 4 (newline -> NEWLINE .)
    FALSE           reduce using rule 4 (newline -> NEWLINE .)
    INTEGER         reduce using rule 4 (newline -> NEWLINE .)
    CHAR            reduce using rule 4 (newline -> NEWLINE .)
    STRING          reduce using rule 4 (newline -> NEWLINE .)
    BOOLEAN         reduce using rule 4 (newline -> NEWLINE .)
    DECIMAL         reduce using rule 4 (newline -> NEWLINE .)
    $end            reduce using rule 4 (newline -> NEWLINE .)
    ELSE            reduce using rule 4 (newline -> NEWLINE .)
    BEGIN           reduce using rule 4 (newline -> NEWLINE .)
    END             reduce using rule 4 (newline -> NEWLINE .)
    OPENARRAY       reduce using rule 4 (newline -> NEWLINE .)
    OF              reduce using rule 4 (newline -> NEWLINE .)
    MULTIPLY        reduce using rule 4 (newline -> NEWLINE .)
    DIVIDE          reduce using rule 4 (newline -> NEWLINE .)
    MODULO          reduce using rule 4 (newline -> NEWLINE .)
    AND             reduce using rule 4 (newline -> NEWLINE .)
    OR              reduce using rule 4 (newline -> NEWLINE .)
    LT              reduce using rule 4 (newline -> NEWLINE .)
    GT              reduce using rule 4 (newline -> NEWLINE .)
    LTE             reduce using rule 4 (newline -> NEWLINE .)
    GTE             reduce using rule 4 (newline -> NEWLINE .)
    EQUALCOMPARISON reduce using rule 4 (newline -> NEWLINE .)
    NOTEQUALS       reduce using rule 4 (newline -> NEWLINE .)
    CLOSEPARAM      reduce using rule 4 (newline -> NEWLINE .)
    CLOSEARRAY      reduce using rule 4 (newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (newline -> NEWLINE .) ]

    newline                        shift and go to state 6

state 5

    (1) start -> PROBLEM ID newline . program
    (2) program -> . statement
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    $end            reduce using rule 96 (empty -> .)
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    program                        shift and go to state 27
    statement                      shift and go to state 29
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 6

    (3) newline -> NEWLINE newline .

    CONTINUE        reduce using rule 3 (newline -> NEWLINE newline .)
    BREAK           reduce using rule 3 (newline -> NEWLINE newline .)
    IF              reduce using rule 3 (newline -> NEWLINE newline .)
    WHILE           reduce using rule 3 (newline -> NEWLINE newline .)
    DO              reduce using rule 3 (newline -> NEWLINE newline .)
    RETURN          reduce using rule 3 (newline -> NEWLINE newline .)
    NEWLINE         reduce using rule 3 (newline -> NEWLINE newline .)
    OPENPARAM       reduce using rule 3 (newline -> NEWLINE newline .)
    INCREMENT       reduce using rule 3 (newline -> NEWLINE newline .)
    DECREMENT       reduce using rule 3 (newline -> NEWLINE newline .)
    NOT             reduce using rule 3 (newline -> NEWLINE newline .)
    PLUS            reduce using rule 3 (newline -> NEWLINE newline .)
    MINUS           reduce using rule 3 (newline -> NEWLINE newline .)
    PERCENTAGE      reduce using rule 3 (newline -> NEWLINE newline .)
    ID              reduce using rule 3 (newline -> NEWLINE newline .)
    ARRAY           reduce using rule 3 (newline -> NEWLINE newline .)
    FUNCTION        reduce using rule 3 (newline -> NEWLINE newline .)
    STRUCTURE       reduce using rule 3 (newline -> NEWLINE newline .)
    STRINGLITERAL   reduce using rule 3 (newline -> NEWLINE newline .)
    INTEGERLITERAL  reduce using rule 3 (newline -> NEWLINE newline .)
    CHARLITERAL     reduce using rule 3 (newline -> NEWLINE newline .)
    DECIMALLITERAL  reduce using rule 3 (newline -> NEWLINE newline .)
    TRUE            reduce using rule 3 (newline -> NEWLINE newline .)
    FALSE           reduce using rule 3 (newline -> NEWLINE newline .)
    INTEGER         reduce using rule 3 (newline -> NEWLINE newline .)
    CHAR            reduce using rule 3 (newline -> NEWLINE newline .)
    STRING          reduce using rule 3 (newline -> NEWLINE newline .)
    BOOLEAN         reduce using rule 3 (newline -> NEWLINE newline .)
    DECIMAL         reduce using rule 3 (newline -> NEWLINE newline .)
    $end            reduce using rule 3 (newline -> NEWLINE newline .)
    ELSE            reduce using rule 3 (newline -> NEWLINE newline .)
    BEGIN           reduce using rule 3 (newline -> NEWLINE newline .)
    END             reduce using rule 3 (newline -> NEWLINE newline .)
    OPENARRAY       reduce using rule 3 (newline -> NEWLINE newline .)
    OF              reduce using rule 3 (newline -> NEWLINE newline .)
    MULTIPLY        reduce using rule 3 (newline -> NEWLINE newline .)
    DIVIDE          reduce using rule 3 (newline -> NEWLINE newline .)
    MODULO          reduce using rule 3 (newline -> NEWLINE newline .)
    AND             reduce using rule 3 (newline -> NEWLINE newline .)
    OR              reduce using rule 3 (newline -> NEWLINE newline .)
    LT              reduce using rule 3 (newline -> NEWLINE newline .)
    GT              reduce using rule 3 (newline -> NEWLINE newline .)
    LTE             reduce using rule 3 (newline -> NEWLINE newline .)
    GTE             reduce using rule 3 (newline -> NEWLINE newline .)
    EQUALCOMPARISON reduce using rule 3 (newline -> NEWLINE newline .)
    NOTEQUALS       reduce using rule 3 (newline -> NEWLINE newline .)
    CLOSEPARAM      reduce using rule 3 (newline -> NEWLINE newline .)
    CLOSEARRAY      reduce using rule 3 (newline -> NEWLINE newline .)


state 7

    (20) dowhilestatement -> DO . statement WHILE OPENPARAM expression CLOSEPARAM newline
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 60
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 8

    (26) dec -> vardec .

    NEWLINE         reduce using rule 26 (dec -> vardec .)


state 9

    (21) returnstatement -> RETURN . expression newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 61

state 10

    (61) expression -> primaryexpression .

    INCREMENT       reduce using rule 61 (expression -> primaryexpression .)
    DECREMENT       reduce using rule 61 (expression -> primaryexpression .)
    OPENARRAY       reduce using rule 61 (expression -> primaryexpression .)
    OF              reduce using rule 61 (expression -> primaryexpression .)
    MULTIPLY        reduce using rule 61 (expression -> primaryexpression .)
    DIVIDE          reduce using rule 61 (expression -> primaryexpression .)
    MODULO          reduce using rule 61 (expression -> primaryexpression .)
    PLUS            reduce using rule 61 (expression -> primaryexpression .)
    MINUS           reduce using rule 61 (expression -> primaryexpression .)
    AND             reduce using rule 61 (expression -> primaryexpression .)
    OR              reduce using rule 61 (expression -> primaryexpression .)
    LT              reduce using rule 61 (expression -> primaryexpression .)
    GT              reduce using rule 61 (expression -> primaryexpression .)
    LTE             reduce using rule 61 (expression -> primaryexpression .)
    GTE             reduce using rule 61 (expression -> primaryexpression .)
    EQUALCOMPARISON reduce using rule 61 (expression -> primaryexpression .)
    NOTEQUALS       reduce using rule 61 (expression -> primaryexpression .)
    NEWLINE         reduce using rule 61 (expression -> primaryexpression .)
    WHILE           reduce using rule 61 (expression -> primaryexpression .)
    CONTINUE        reduce using rule 61 (expression -> primaryexpression .)
    BREAK           reduce using rule 61 (expression -> primaryexpression .)
    IF              reduce using rule 61 (expression -> primaryexpression .)
    DO              reduce using rule 61 (expression -> primaryexpression .)
    RETURN          reduce using rule 61 (expression -> primaryexpression .)
    OPENPARAM       reduce using rule 61 (expression -> primaryexpression .)
    NOT             reduce using rule 61 (expression -> primaryexpression .)
    PERCENTAGE      reduce using rule 61 (expression -> primaryexpression .)
    ID              reduce using rule 61 (expression -> primaryexpression .)
    ARRAY           reduce using rule 61 (expression -> primaryexpression .)
    FUNCTION        reduce using rule 61 (expression -> primaryexpression .)
    STRUCTURE       reduce using rule 61 (expression -> primaryexpression .)
    STRINGLITERAL   reduce using rule 61 (expression -> primaryexpression .)
    INTEGERLITERAL  reduce using rule 61 (expression -> primaryexpression .)
    CHARLITERAL     reduce using rule 61 (expression -> primaryexpression .)
    DECIMALLITERAL  reduce using rule 61 (expression -> primaryexpression .)
    TRUE            reduce using rule 61 (expression -> primaryexpression .)
    FALSE           reduce using rule 61 (expression -> primaryexpression .)
    INTEGER         reduce using rule 61 (expression -> primaryexpression .)
    CHAR            reduce using rule 61 (expression -> primaryexpression .)
    STRING          reduce using rule 61 (expression -> primaryexpression .)
    BOOLEAN         reduce using rule 61 (expression -> primaryexpression .)
    DECIMAL         reduce using rule 61 (expression -> primaryexpression .)
    $end            reduce using rule 61 (expression -> primaryexpression .)
    ELSE            reduce using rule 61 (expression -> primaryexpression .)
    CLOSEPARAM      reduce using rule 61 (expression -> primaryexpression .)
    CLOSEARRAY      reduce using rule 61 (expression -> primaryexpression .)


state 11

    (27) dec -> arraydec .

    NEWLINE         reduce using rule 27 (dec -> arraydec .)


state 12

    (8) statement -> dowhilestatement .

    CONTINUE        reduce using rule 8 (statement -> dowhilestatement .)
    BREAK           reduce using rule 8 (statement -> dowhilestatement .)
    IF              reduce using rule 8 (statement -> dowhilestatement .)
    WHILE           reduce using rule 8 (statement -> dowhilestatement .)
    DO              reduce using rule 8 (statement -> dowhilestatement .)
    RETURN          reduce using rule 8 (statement -> dowhilestatement .)
    NEWLINE         reduce using rule 8 (statement -> dowhilestatement .)
    OPENPARAM       reduce using rule 8 (statement -> dowhilestatement .)
    INCREMENT       reduce using rule 8 (statement -> dowhilestatement .)
    DECREMENT       reduce using rule 8 (statement -> dowhilestatement .)
    NOT             reduce using rule 8 (statement -> dowhilestatement .)
    PLUS            reduce using rule 8 (statement -> dowhilestatement .)
    MINUS           reduce using rule 8 (statement -> dowhilestatement .)
    PERCENTAGE      reduce using rule 8 (statement -> dowhilestatement .)
    ID              reduce using rule 8 (statement -> dowhilestatement .)
    ARRAY           reduce using rule 8 (statement -> dowhilestatement .)
    FUNCTION        reduce using rule 8 (statement -> dowhilestatement .)
    STRUCTURE       reduce using rule 8 (statement -> dowhilestatement .)
    STRINGLITERAL   reduce using rule 8 (statement -> dowhilestatement .)
    INTEGERLITERAL  reduce using rule 8 (statement -> dowhilestatement .)
    CHARLITERAL     reduce using rule 8 (statement -> dowhilestatement .)
    DECIMALLITERAL  reduce using rule 8 (statement -> dowhilestatement .)
    TRUE            reduce using rule 8 (statement -> dowhilestatement .)
    FALSE           reduce using rule 8 (statement -> dowhilestatement .)
    INTEGER         reduce using rule 8 (statement -> dowhilestatement .)
    CHAR            reduce using rule 8 (statement -> dowhilestatement .)
    STRING          reduce using rule 8 (statement -> dowhilestatement .)
    BOOLEAN         reduce using rule 8 (statement -> dowhilestatement .)
    DECIMAL         reduce using rule 8 (statement -> dowhilestatement .)
    $end            reduce using rule 8 (statement -> dowhilestatement .)
    ELSE            reduce using rule 8 (statement -> dowhilestatement .)


state 13

    (59) expression -> OPENPARAM . expression CLOSEPARAM
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 62

state 14

    (36) arraydec -> ARRAY . type ID newline
    (37) arraydec -> ARRAY . type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

    type                           shift and go to state 63

state 15

    (45) literal -> STRINGLITERAL .

    COMMA           reduce using rule 45 (literal -> STRINGLITERAL .)
    CLOSEPARAM      reduce using rule 45 (literal -> STRINGLITERAL .)
    INCREMENT       reduce using rule 45 (literal -> STRINGLITERAL .)
    DECREMENT       reduce using rule 45 (literal -> STRINGLITERAL .)
    OPENARRAY       reduce using rule 45 (literal -> STRINGLITERAL .)
    OF              reduce using rule 45 (literal -> STRINGLITERAL .)
    MULTIPLY        reduce using rule 45 (literal -> STRINGLITERAL .)
    DIVIDE          reduce using rule 45 (literal -> STRINGLITERAL .)
    MODULO          reduce using rule 45 (literal -> STRINGLITERAL .)
    PLUS            reduce using rule 45 (literal -> STRINGLITERAL .)
    MINUS           reduce using rule 45 (literal -> STRINGLITERAL .)
    AND             reduce using rule 45 (literal -> STRINGLITERAL .)
    OR              reduce using rule 45 (literal -> STRINGLITERAL .)
    LT              reduce using rule 45 (literal -> STRINGLITERAL .)
    GT              reduce using rule 45 (literal -> STRINGLITERAL .)
    LTE             reduce using rule 45 (literal -> STRINGLITERAL .)
    GTE             reduce using rule 45 (literal -> STRINGLITERAL .)
    EQUALCOMPARISON reduce using rule 45 (literal -> STRINGLITERAL .)
    NOTEQUALS       reduce using rule 45 (literal -> STRINGLITERAL .)
    NEWLINE         reduce using rule 45 (literal -> STRINGLITERAL .)
    CONTINUE        reduce using rule 45 (literal -> STRINGLITERAL .)
    BREAK           reduce using rule 45 (literal -> STRINGLITERAL .)
    IF              reduce using rule 45 (literal -> STRINGLITERAL .)
    WHILE           reduce using rule 45 (literal -> STRINGLITERAL .)
    DO              reduce using rule 45 (literal -> STRINGLITERAL .)
    RETURN          reduce using rule 45 (literal -> STRINGLITERAL .)
    OPENPARAM       reduce using rule 45 (literal -> STRINGLITERAL .)
    NOT             reduce using rule 45 (literal -> STRINGLITERAL .)
    PERCENTAGE      reduce using rule 45 (literal -> STRINGLITERAL .)
    ID              reduce using rule 45 (literal -> STRINGLITERAL .)
    ARRAY           reduce using rule 45 (literal -> STRINGLITERAL .)
    FUNCTION        reduce using rule 45 (literal -> STRINGLITERAL .)
    STRUCTURE       reduce using rule 45 (literal -> STRINGLITERAL .)
    STRINGLITERAL   reduce using rule 45 (literal -> STRINGLITERAL .)
    INTEGERLITERAL  reduce using rule 45 (literal -> STRINGLITERAL .)
    CHARLITERAL     reduce using rule 45 (literal -> STRINGLITERAL .)
    DECIMALLITERAL  reduce using rule 45 (literal -> STRINGLITERAL .)
    TRUE            reduce using rule 45 (literal -> STRINGLITERAL .)
    FALSE           reduce using rule 45 (literal -> STRINGLITERAL .)
    INTEGER         reduce using rule 45 (literal -> STRINGLITERAL .)
    CHAR            reduce using rule 45 (literal -> STRINGLITERAL .)
    STRING          reduce using rule 45 (literal -> STRINGLITERAL .)
    BOOLEAN         reduce using rule 45 (literal -> STRINGLITERAL .)
    DECIMAL         reduce using rule 45 (literal -> STRINGLITERAL .)
    $end            reduce using rule 45 (literal -> STRINGLITERAL .)
    ELSE            reduce using rule 45 (literal -> STRINGLITERAL .)
    CLOSEARRAY      reduce using rule 45 (literal -> STRINGLITERAL .)


state 16

    (57) expression -> memberaccess .

    INCREMENT       reduce using rule 57 (expression -> memberaccess .)
    DECREMENT       reduce using rule 57 (expression -> memberaccess .)
    OPENARRAY       reduce using rule 57 (expression -> memberaccess .)
    OF              reduce using rule 57 (expression -> memberaccess .)
    MULTIPLY        reduce using rule 57 (expression -> memberaccess .)
    DIVIDE          reduce using rule 57 (expression -> memberaccess .)
    MODULO          reduce using rule 57 (expression -> memberaccess .)
    PLUS            reduce using rule 57 (expression -> memberaccess .)
    MINUS           reduce using rule 57 (expression -> memberaccess .)
    AND             reduce using rule 57 (expression -> memberaccess .)
    OR              reduce using rule 57 (expression -> memberaccess .)
    LT              reduce using rule 57 (expression -> memberaccess .)
    GT              reduce using rule 57 (expression -> memberaccess .)
    LTE             reduce using rule 57 (expression -> memberaccess .)
    GTE             reduce using rule 57 (expression -> memberaccess .)
    EQUALCOMPARISON reduce using rule 57 (expression -> memberaccess .)
    NOTEQUALS       reduce using rule 57 (expression -> memberaccess .)
    NEWLINE         reduce using rule 57 (expression -> memberaccess .)
    WHILE           reduce using rule 57 (expression -> memberaccess .)
    CONTINUE        reduce using rule 57 (expression -> memberaccess .)
    BREAK           reduce using rule 57 (expression -> memberaccess .)
    IF              reduce using rule 57 (expression -> memberaccess .)
    DO              reduce using rule 57 (expression -> memberaccess .)
    RETURN          reduce using rule 57 (expression -> memberaccess .)
    OPENPARAM       reduce using rule 57 (expression -> memberaccess .)
    NOT             reduce using rule 57 (expression -> memberaccess .)
    PERCENTAGE      reduce using rule 57 (expression -> memberaccess .)
    ID              reduce using rule 57 (expression -> memberaccess .)
    ARRAY           reduce using rule 57 (expression -> memberaccess .)
    FUNCTION        reduce using rule 57 (expression -> memberaccess .)
    STRUCTURE       reduce using rule 57 (expression -> memberaccess .)
    STRINGLITERAL   reduce using rule 57 (expression -> memberaccess .)
    INTEGERLITERAL  reduce using rule 57 (expression -> memberaccess .)
    CHARLITERAL     reduce using rule 57 (expression -> memberaccess .)
    DECIMALLITERAL  reduce using rule 57 (expression -> memberaccess .)
    TRUE            reduce using rule 57 (expression -> memberaccess .)
    FALSE           reduce using rule 57 (expression -> memberaccess .)
    INTEGER         reduce using rule 57 (expression -> memberaccess .)
    CHAR            reduce using rule 57 (expression -> memberaccess .)
    STRING          reduce using rule 57 (expression -> memberaccess .)
    BOOLEAN         reduce using rule 57 (expression -> memberaccess .)
    DECIMAL         reduce using rule 57 (expression -> memberaccess .)
    $end            reduce using rule 57 (expression -> memberaccess .)
    ELSE            reduce using rule 57 (expression -> memberaccess .)
    CLOSEPARAM      reduce using rule 57 (expression -> memberaccess .)
    CLOSEARRAY      reduce using rule 57 (expression -> memberaccess .)


state 17

    (94) type -> BOOLEAN .

    ID              reduce using rule 94 (type -> BOOLEAN .)


state 18

    (19) whilestatement -> WHILE . OPENPARAM expression CLOSEPARAM newline statement

    OPENPARAM       shift and go to state 64


state 19

    (93) type -> STRING .

    ID              reduce using rule 93 (type -> STRING .)


state 20

    (49) literal -> TRUE .

    COMMA           reduce using rule 49 (literal -> TRUE .)
    CLOSEPARAM      reduce using rule 49 (literal -> TRUE .)
    INCREMENT       reduce using rule 49 (literal -> TRUE .)
    DECREMENT       reduce using rule 49 (literal -> TRUE .)
    OPENARRAY       reduce using rule 49 (literal -> TRUE .)
    OF              reduce using rule 49 (literal -> TRUE .)
    MULTIPLY        reduce using rule 49 (literal -> TRUE .)
    DIVIDE          reduce using rule 49 (literal -> TRUE .)
    MODULO          reduce using rule 49 (literal -> TRUE .)
    PLUS            reduce using rule 49 (literal -> TRUE .)
    MINUS           reduce using rule 49 (literal -> TRUE .)
    AND             reduce using rule 49 (literal -> TRUE .)
    OR              reduce using rule 49 (literal -> TRUE .)
    LT              reduce using rule 49 (literal -> TRUE .)
    GT              reduce using rule 49 (literal -> TRUE .)
    LTE             reduce using rule 49 (literal -> TRUE .)
    GTE             reduce using rule 49 (literal -> TRUE .)
    EQUALCOMPARISON reduce using rule 49 (literal -> TRUE .)
    NOTEQUALS       reduce using rule 49 (literal -> TRUE .)
    NEWLINE         reduce using rule 49 (literal -> TRUE .)
    CONTINUE        reduce using rule 49 (literal -> TRUE .)
    BREAK           reduce using rule 49 (literal -> TRUE .)
    IF              reduce using rule 49 (literal -> TRUE .)
    WHILE           reduce using rule 49 (literal -> TRUE .)
    DO              reduce using rule 49 (literal -> TRUE .)
    RETURN          reduce using rule 49 (literal -> TRUE .)
    OPENPARAM       reduce using rule 49 (literal -> TRUE .)
    NOT             reduce using rule 49 (literal -> TRUE .)
    PERCENTAGE      reduce using rule 49 (literal -> TRUE .)
    ID              reduce using rule 49 (literal -> TRUE .)
    ARRAY           reduce using rule 49 (literal -> TRUE .)
    FUNCTION        reduce using rule 49 (literal -> TRUE .)
    STRUCTURE       reduce using rule 49 (literal -> TRUE .)
    STRINGLITERAL   reduce using rule 49 (literal -> TRUE .)
    INTEGERLITERAL  reduce using rule 49 (literal -> TRUE .)
    CHARLITERAL     reduce using rule 49 (literal -> TRUE .)
    DECIMALLITERAL  reduce using rule 49 (literal -> TRUE .)
    TRUE            reduce using rule 49 (literal -> TRUE .)
    FALSE           reduce using rule 49 (literal -> TRUE .)
    INTEGER         reduce using rule 49 (literal -> TRUE .)
    CHAR            reduce using rule 49 (literal -> TRUE .)
    STRING          reduce using rule 49 (literal -> TRUE .)
    BOOLEAN         reduce using rule 49 (literal -> TRUE .)
    DECIMAL         reduce using rule 49 (literal -> TRUE .)
    $end            reduce using rule 49 (literal -> TRUE .)
    ELSE            reduce using rule 49 (literal -> TRUE .)
    CLOSEARRAY      reduce using rule 49 (literal -> TRUE .)


state 21

    (67) unaryop -> MINUS .

    OPENPARAM       reduce using rule 67 (unaryop -> MINUS .)
    INCREMENT       reduce using rule 67 (unaryop -> MINUS .)
    DECREMENT       reduce using rule 67 (unaryop -> MINUS .)
    NOT             reduce using rule 67 (unaryop -> MINUS .)
    PLUS            reduce using rule 67 (unaryop -> MINUS .)
    MINUS           reduce using rule 67 (unaryop -> MINUS .)
    PERCENTAGE      reduce using rule 67 (unaryop -> MINUS .)
    ID              reduce using rule 67 (unaryop -> MINUS .)
    STRINGLITERAL   reduce using rule 67 (unaryop -> MINUS .)
    INTEGERLITERAL  reduce using rule 67 (unaryop -> MINUS .)
    CHARLITERAL     reduce using rule 67 (unaryop -> MINUS .)
    DECIMALLITERAL  reduce using rule 67 (unaryop -> MINUS .)
    TRUE            reduce using rule 67 (unaryop -> MINUS .)
    FALSE           reduce using rule 67 (unaryop -> MINUS .)


state 22

    (22) simplestatement -> decs .

    CONTINUE        reduce using rule 22 (simplestatement -> decs .)
    BREAK           reduce using rule 22 (simplestatement -> decs .)
    IF              reduce using rule 22 (simplestatement -> decs .)
    WHILE           reduce using rule 22 (simplestatement -> decs .)
    DO              reduce using rule 22 (simplestatement -> decs .)
    RETURN          reduce using rule 22 (simplestatement -> decs .)
    NEWLINE         reduce using rule 22 (simplestatement -> decs .)
    OPENPARAM       reduce using rule 22 (simplestatement -> decs .)
    INCREMENT       reduce using rule 22 (simplestatement -> decs .)
    DECREMENT       reduce using rule 22 (simplestatement -> decs .)
    NOT             reduce using rule 22 (simplestatement -> decs .)
    PLUS            reduce using rule 22 (simplestatement -> decs .)
    MINUS           reduce using rule 22 (simplestatement -> decs .)
    PERCENTAGE      reduce using rule 22 (simplestatement -> decs .)
    ID              reduce using rule 22 (simplestatement -> decs .)
    ARRAY           reduce using rule 22 (simplestatement -> decs .)
    FUNCTION        reduce using rule 22 (simplestatement -> decs .)
    STRUCTURE       reduce using rule 22 (simplestatement -> decs .)
    STRINGLITERAL   reduce using rule 22 (simplestatement -> decs .)
    INTEGERLITERAL  reduce using rule 22 (simplestatement -> decs .)
    CHARLITERAL     reduce using rule 22 (simplestatement -> decs .)
    DECIMALLITERAL  reduce using rule 22 (simplestatement -> decs .)
    TRUE            reduce using rule 22 (simplestatement -> decs .)
    FALSE           reduce using rule 22 (simplestatement -> decs .)
    INTEGER         reduce using rule 22 (simplestatement -> decs .)
    CHAR            reduce using rule 22 (simplestatement -> decs .)
    STRING          reduce using rule 22 (simplestatement -> decs .)
    BOOLEAN         reduce using rule 22 (simplestatement -> decs .)
    DECIMAL         reduce using rule 22 (simplestatement -> decs .)
    $end            reduce using rule 22 (simplestatement -> decs .)
    ELSE            reduce using rule 22 (simplestatement -> decs .)


state 23

    (47) literal -> CHARLITERAL .

    COMMA           reduce using rule 47 (literal -> CHARLITERAL .)
    CLOSEPARAM      reduce using rule 47 (literal -> CHARLITERAL .)
    INCREMENT       reduce using rule 47 (literal -> CHARLITERAL .)
    DECREMENT       reduce using rule 47 (literal -> CHARLITERAL .)
    OPENARRAY       reduce using rule 47 (literal -> CHARLITERAL .)
    OF              reduce using rule 47 (literal -> CHARLITERAL .)
    MULTIPLY        reduce using rule 47 (literal -> CHARLITERAL .)
    DIVIDE          reduce using rule 47 (literal -> CHARLITERAL .)
    MODULO          reduce using rule 47 (literal -> CHARLITERAL .)
    PLUS            reduce using rule 47 (literal -> CHARLITERAL .)
    MINUS           reduce using rule 47 (literal -> CHARLITERAL .)
    AND             reduce using rule 47 (literal -> CHARLITERAL .)
    OR              reduce using rule 47 (literal -> CHARLITERAL .)
    LT              reduce using rule 47 (literal -> CHARLITERAL .)
    GT              reduce using rule 47 (literal -> CHARLITERAL .)
    LTE             reduce using rule 47 (literal -> CHARLITERAL .)
    GTE             reduce using rule 47 (literal -> CHARLITERAL .)
    EQUALCOMPARISON reduce using rule 47 (literal -> CHARLITERAL .)
    NOTEQUALS       reduce using rule 47 (literal -> CHARLITERAL .)
    NEWLINE         reduce using rule 47 (literal -> CHARLITERAL .)
    CONTINUE        reduce using rule 47 (literal -> CHARLITERAL .)
    BREAK           reduce using rule 47 (literal -> CHARLITERAL .)
    IF              reduce using rule 47 (literal -> CHARLITERAL .)
    WHILE           reduce using rule 47 (literal -> CHARLITERAL .)
    DO              reduce using rule 47 (literal -> CHARLITERAL .)
    RETURN          reduce using rule 47 (literal -> CHARLITERAL .)
    OPENPARAM       reduce using rule 47 (literal -> CHARLITERAL .)
    NOT             reduce using rule 47 (literal -> CHARLITERAL .)
    PERCENTAGE      reduce using rule 47 (literal -> CHARLITERAL .)
    ID              reduce using rule 47 (literal -> CHARLITERAL .)
    ARRAY           reduce using rule 47 (literal -> CHARLITERAL .)
    FUNCTION        reduce using rule 47 (literal -> CHARLITERAL .)
    STRUCTURE       reduce using rule 47 (literal -> CHARLITERAL .)
    STRINGLITERAL   reduce using rule 47 (literal -> CHARLITERAL .)
    INTEGERLITERAL  reduce using rule 47 (literal -> CHARLITERAL .)
    CHARLITERAL     reduce using rule 47 (literal -> CHARLITERAL .)
    DECIMALLITERAL  reduce using rule 47 (literal -> CHARLITERAL .)
    TRUE            reduce using rule 47 (literal -> CHARLITERAL .)
    FALSE           reduce using rule 47 (literal -> CHARLITERAL .)
    INTEGER         reduce using rule 47 (literal -> CHARLITERAL .)
    CHAR            reduce using rule 47 (literal -> CHARLITERAL .)
    STRING          reduce using rule 47 (literal -> CHARLITERAL .)
    BOOLEAN         reduce using rule 47 (literal -> CHARLITERAL .)
    DECIMAL         reduce using rule 47 (literal -> CHARLITERAL .)
    $end            reduce using rule 47 (literal -> CHARLITERAL .)
    ELSE            reduce using rule 47 (literal -> CHARLITERAL .)
    CLOSEARRAY      reduce using rule 47 (literal -> CHARLITERAL .)


state 24

    (7) statement -> whilestatement .

    CONTINUE        reduce using rule 7 (statement -> whilestatement .)
    BREAK           reduce using rule 7 (statement -> whilestatement .)
    IF              reduce using rule 7 (statement -> whilestatement .)
    WHILE           reduce using rule 7 (statement -> whilestatement .)
    DO              reduce using rule 7 (statement -> whilestatement .)
    RETURN          reduce using rule 7 (statement -> whilestatement .)
    NEWLINE         reduce using rule 7 (statement -> whilestatement .)
    OPENPARAM       reduce using rule 7 (statement -> whilestatement .)
    INCREMENT       reduce using rule 7 (statement -> whilestatement .)
    DECREMENT       reduce using rule 7 (statement -> whilestatement .)
    NOT             reduce using rule 7 (statement -> whilestatement .)
    PLUS            reduce using rule 7 (statement -> whilestatement .)
    MINUS           reduce using rule 7 (statement -> whilestatement .)
    PERCENTAGE      reduce using rule 7 (statement -> whilestatement .)
    ID              reduce using rule 7 (statement -> whilestatement .)
    ARRAY           reduce using rule 7 (statement -> whilestatement .)
    FUNCTION        reduce using rule 7 (statement -> whilestatement .)
    STRUCTURE       reduce using rule 7 (statement -> whilestatement .)
    STRINGLITERAL   reduce using rule 7 (statement -> whilestatement .)
    INTEGERLITERAL  reduce using rule 7 (statement -> whilestatement .)
    CHARLITERAL     reduce using rule 7 (statement -> whilestatement .)
    DECIMALLITERAL  reduce using rule 7 (statement -> whilestatement .)
    TRUE            reduce using rule 7 (statement -> whilestatement .)
    FALSE           reduce using rule 7 (statement -> whilestatement .)
    INTEGER         reduce using rule 7 (statement -> whilestatement .)
    CHAR            reduce using rule 7 (statement -> whilestatement .)
    STRING          reduce using rule 7 (statement -> whilestatement .)
    BOOLEAN         reduce using rule 7 (statement -> whilestatement .)
    DECIMAL         reduce using rule 7 (statement -> whilestatement .)
    $end            reduce using rule 7 (statement -> whilestatement .)
    ELSE            reduce using rule 7 (statement -> whilestatement .)


state 25

    (89) primaryexpression -> literal .

    CLOSEPARAM      reduce using rule 89 (primaryexpression -> literal .)
    INCREMENT       reduce using rule 89 (primaryexpression -> literal .)
    DECREMENT       reduce using rule 89 (primaryexpression -> literal .)
    OPENARRAY       reduce using rule 89 (primaryexpression -> literal .)
    OF              reduce using rule 89 (primaryexpression -> literal .)
    MULTIPLY        reduce using rule 89 (primaryexpression -> literal .)
    DIVIDE          reduce using rule 89 (primaryexpression -> literal .)
    MODULO          reduce using rule 89 (primaryexpression -> literal .)
    PLUS            reduce using rule 89 (primaryexpression -> literal .)
    MINUS           reduce using rule 89 (primaryexpression -> literal .)
    AND             reduce using rule 89 (primaryexpression -> literal .)
    OR              reduce using rule 89 (primaryexpression -> literal .)
    LT              reduce using rule 89 (primaryexpression -> literal .)
    GT              reduce using rule 89 (primaryexpression -> literal .)
    LTE             reduce using rule 89 (primaryexpression -> literal .)
    GTE             reduce using rule 89 (primaryexpression -> literal .)
    EQUALCOMPARISON reduce using rule 89 (primaryexpression -> literal .)
    NOTEQUALS       reduce using rule 89 (primaryexpression -> literal .)
    NEWLINE         reduce using rule 89 (primaryexpression -> literal .)
    CONTINUE        reduce using rule 89 (primaryexpression -> literal .)
    BREAK           reduce using rule 89 (primaryexpression -> literal .)
    IF              reduce using rule 89 (primaryexpression -> literal .)
    WHILE           reduce using rule 89 (primaryexpression -> literal .)
    DO              reduce using rule 89 (primaryexpression -> literal .)
    RETURN          reduce using rule 89 (primaryexpression -> literal .)
    OPENPARAM       reduce using rule 89 (primaryexpression -> literal .)
    NOT             reduce using rule 89 (primaryexpression -> literal .)
    PERCENTAGE      reduce using rule 89 (primaryexpression -> literal .)
    ID              reduce using rule 89 (primaryexpression -> literal .)
    ARRAY           reduce using rule 89 (primaryexpression -> literal .)
    FUNCTION        reduce using rule 89 (primaryexpression -> literal .)
    STRUCTURE       reduce using rule 89 (primaryexpression -> literal .)
    STRINGLITERAL   reduce using rule 89 (primaryexpression -> literal .)
    INTEGERLITERAL  reduce using rule 89 (primaryexpression -> literal .)
    CHARLITERAL     reduce using rule 89 (primaryexpression -> literal .)
    DECIMALLITERAL  reduce using rule 89 (primaryexpression -> literal .)
    TRUE            reduce using rule 89 (primaryexpression -> literal .)
    FALSE           reduce using rule 89 (primaryexpression -> literal .)
    INTEGER         reduce using rule 89 (primaryexpression -> literal .)
    CHAR            reduce using rule 89 (primaryexpression -> literal .)
    STRING          reduce using rule 89 (primaryexpression -> literal .)
    BOOLEAN         reduce using rule 89 (primaryexpression -> literal .)
    DECIMAL         reduce using rule 89 (primaryexpression -> literal .)
    $end            reduce using rule 89 (primaryexpression -> literal .)
    ELSE            reduce using rule 89 (primaryexpression -> literal .)
    CLOSEARRAY      reduce using rule 89 (primaryexpression -> literal .)


state 26

    (29) dec -> functiondefn .

    NEWLINE         reduce using rule 29 (dec -> functiondefn .)


state 27

    (1) start -> PROBLEM ID newline program .

    $end            reduce using rule 1 (start -> PROBLEM ID newline program .)


state 28

    (66) unaryop -> PLUS .

    OPENPARAM       reduce using rule 66 (unaryop -> PLUS .)
    INCREMENT       reduce using rule 66 (unaryop -> PLUS .)
    DECREMENT       reduce using rule 66 (unaryop -> PLUS .)
    NOT             reduce using rule 66 (unaryop -> PLUS .)
    PLUS            reduce using rule 66 (unaryop -> PLUS .)
    MINUS           reduce using rule 66 (unaryop -> PLUS .)
    PERCENTAGE      reduce using rule 66 (unaryop -> PLUS .)
    ID              reduce using rule 66 (unaryop -> PLUS .)
    STRINGLITERAL   reduce using rule 66 (unaryop -> PLUS .)
    INTEGERLITERAL  reduce using rule 66 (unaryop -> PLUS .)
    CHARLITERAL     reduce using rule 66 (unaryop -> PLUS .)
    DECIMALLITERAL  reduce using rule 66 (unaryop -> PLUS .)
    TRUE            reduce using rule 66 (unaryop -> PLUS .)
    FALSE           reduce using rule 66 (unaryop -> PLUS .)


state 29

    (2) program -> statement .
    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> statement .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    $end            reduce using rule 2 (program -> statement .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! $end            [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]
  ! $end            [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 30

    (48) literal -> DECIMALLITERAL .

    COMMA           reduce using rule 48 (literal -> DECIMALLITERAL .)
    CLOSEPARAM      reduce using rule 48 (literal -> DECIMALLITERAL .)
    INCREMENT       reduce using rule 48 (literal -> DECIMALLITERAL .)
    DECREMENT       reduce using rule 48 (literal -> DECIMALLITERAL .)
    OPENARRAY       reduce using rule 48 (literal -> DECIMALLITERAL .)
    OF              reduce using rule 48 (literal -> DECIMALLITERAL .)
    MULTIPLY        reduce using rule 48 (literal -> DECIMALLITERAL .)
    DIVIDE          reduce using rule 48 (literal -> DECIMALLITERAL .)
    MODULO          reduce using rule 48 (literal -> DECIMALLITERAL .)
    PLUS            reduce using rule 48 (literal -> DECIMALLITERAL .)
    MINUS           reduce using rule 48 (literal -> DECIMALLITERAL .)
    AND             reduce using rule 48 (literal -> DECIMALLITERAL .)
    OR              reduce using rule 48 (literal -> DECIMALLITERAL .)
    LT              reduce using rule 48 (literal -> DECIMALLITERAL .)
    GT              reduce using rule 48 (literal -> DECIMALLITERAL .)
    LTE             reduce using rule 48 (literal -> DECIMALLITERAL .)
    GTE             reduce using rule 48 (literal -> DECIMALLITERAL .)
    EQUALCOMPARISON reduce using rule 48 (literal -> DECIMALLITERAL .)
    NOTEQUALS       reduce using rule 48 (literal -> DECIMALLITERAL .)
    NEWLINE         reduce using rule 48 (literal -> DECIMALLITERAL .)
    CONTINUE        reduce using rule 48 (literal -> DECIMALLITERAL .)
    BREAK           reduce using rule 48 (literal -> DECIMALLITERAL .)
    IF              reduce using rule 48 (literal -> DECIMALLITERAL .)
    WHILE           reduce using rule 48 (literal -> DECIMALLITERAL .)
    DO              reduce using rule 48 (literal -> DECIMALLITERAL .)
    RETURN          reduce using rule 48 (literal -> DECIMALLITERAL .)
    OPENPARAM       reduce using rule 48 (literal -> DECIMALLITERAL .)
    NOT             reduce using rule 48 (literal -> DECIMALLITERAL .)
    PERCENTAGE      reduce using rule 48 (literal -> DECIMALLITERAL .)
    ID              reduce using rule 48 (literal -> DECIMALLITERAL .)
    ARRAY           reduce using rule 48 (literal -> DECIMALLITERAL .)
    FUNCTION        reduce using rule 48 (literal -> DECIMALLITERAL .)
    STRUCTURE       reduce using rule 48 (literal -> DECIMALLITERAL .)
    STRINGLITERAL   reduce using rule 48 (literal -> DECIMALLITERAL .)
    INTEGERLITERAL  reduce using rule 48 (literal -> DECIMALLITERAL .)
    CHARLITERAL     reduce using rule 48 (literal -> DECIMALLITERAL .)
    DECIMALLITERAL  reduce using rule 48 (literal -> DECIMALLITERAL .)
    TRUE            reduce using rule 48 (literal -> DECIMALLITERAL .)
    FALSE           reduce using rule 48 (literal -> DECIMALLITERAL .)
    INTEGER         reduce using rule 48 (literal -> DECIMALLITERAL .)
    CHAR            reduce using rule 48 (literal -> DECIMALLITERAL .)
    STRING          reduce using rule 48 (literal -> DECIMALLITERAL .)
    BOOLEAN         reduce using rule 48 (literal -> DECIMALLITERAL .)
    DECIMAL         reduce using rule 48 (literal -> DECIMALLITERAL .)
    $end            reduce using rule 48 (literal -> DECIMALLITERAL .)
    ELSE            reduce using rule 48 (literal -> DECIMALLITERAL .)
    CLOSEARRAY      reduce using rule 48 (literal -> DECIMALLITERAL .)


state 31

    (68) unaryop -> PERCENTAGE .

    OPENPARAM       reduce using rule 68 (unaryop -> PERCENTAGE .)
    INCREMENT       reduce using rule 68 (unaryop -> PERCENTAGE .)
    DECREMENT       reduce using rule 68 (unaryop -> PERCENTAGE .)
    NOT             reduce using rule 68 (unaryop -> PERCENTAGE .)
    PLUS            reduce using rule 68 (unaryop -> PERCENTAGE .)
    MINUS           reduce using rule 68 (unaryop -> PERCENTAGE .)
    PERCENTAGE      reduce using rule 68 (unaryop -> PERCENTAGE .)
    ID              reduce using rule 68 (unaryop -> PERCENTAGE .)
    STRINGLITERAL   reduce using rule 68 (unaryop -> PERCENTAGE .)
    INTEGERLITERAL  reduce using rule 68 (unaryop -> PERCENTAGE .)
    CHARLITERAL     reduce using rule 68 (unaryop -> PERCENTAGE .)
    DECIMALLITERAL  reduce using rule 68 (unaryop -> PERCENTAGE .)
    TRUE            reduce using rule 68 (unaryop -> PERCENTAGE .)
    FALSE           reduce using rule 68 (unaryop -> PERCENTAGE .)


state 32

    (31) vardec -> type . iddec
    (32) iddec -> . ID newline
    (33) iddec -> . ID COMMA iddec
    (34) iddec -> . ID EQUALS literal newline
    (35) iddec -> . ID EQUALS literal COMMA iddec

    ID              shift and go to state 68

    iddec                          shift and go to state 67

state 33

    (13) statement -> empty .

    CONTINUE        reduce using rule 13 (statement -> empty .)
    BREAK           reduce using rule 13 (statement -> empty .)
    IF              reduce using rule 13 (statement -> empty .)
    WHILE           reduce using rule 13 (statement -> empty .)
    DO              reduce using rule 13 (statement -> empty .)
    RETURN          reduce using rule 13 (statement -> empty .)
    NEWLINE         reduce using rule 13 (statement -> empty .)
    OPENPARAM       reduce using rule 13 (statement -> empty .)
    INCREMENT       reduce using rule 13 (statement -> empty .)
    DECREMENT       reduce using rule 13 (statement -> empty .)
    NOT             reduce using rule 13 (statement -> empty .)
    PLUS            reduce using rule 13 (statement -> empty .)
    MINUS           reduce using rule 13 (statement -> empty .)
    PERCENTAGE      reduce using rule 13 (statement -> empty .)
    ID              reduce using rule 13 (statement -> empty .)
    ARRAY           reduce using rule 13 (statement -> empty .)
    FUNCTION        reduce using rule 13 (statement -> empty .)
    STRUCTURE       reduce using rule 13 (statement -> empty .)
    STRINGLITERAL   reduce using rule 13 (statement -> empty .)
    INTEGERLITERAL  reduce using rule 13 (statement -> empty .)
    CHARLITERAL     reduce using rule 13 (statement -> empty .)
    DECIMALLITERAL  reduce using rule 13 (statement -> empty .)
    TRUE            reduce using rule 13 (statement -> empty .)
    FALSE           reduce using rule 13 (statement -> empty .)
    INTEGER         reduce using rule 13 (statement -> empty .)
    CHAR            reduce using rule 13 (statement -> empty .)
    STRING          reduce using rule 13 (statement -> empty .)
    BOOLEAN         reduce using rule 13 (statement -> empty .)
    DECIMAL         reduce using rule 13 (statement -> empty .)
    $end            reduce using rule 13 (statement -> empty .)
    ELSE            reduce using rule 13 (statement -> empty .)


state 34

    (38) functiondec -> FUNCTION . ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> FUNCTION . ID OPENPARAM paramlist CLOSEPARAM newline

    ID              shift and go to state 69


state 35

    (63) unaryop -> INCREMENT .

    OPENPARAM       reduce using rule 63 (unaryop -> INCREMENT .)
    INCREMENT       reduce using rule 63 (unaryop -> INCREMENT .)
    DECREMENT       reduce using rule 63 (unaryop -> INCREMENT .)
    NOT             reduce using rule 63 (unaryop -> INCREMENT .)
    PLUS            reduce using rule 63 (unaryop -> INCREMENT .)
    MINUS           reduce using rule 63 (unaryop -> INCREMENT .)
    PERCENTAGE      reduce using rule 63 (unaryop -> INCREMENT .)
    ID              reduce using rule 63 (unaryop -> INCREMENT .)
    STRINGLITERAL   reduce using rule 63 (unaryop -> INCREMENT .)
    INTEGERLITERAL  reduce using rule 63 (unaryop -> INCREMENT .)
    CHARLITERAL     reduce using rule 63 (unaryop -> INCREMENT .)
    DECIMALLITERAL  reduce using rule 63 (unaryop -> INCREMENT .)
    TRUE            reduce using rule 63 (unaryop -> INCREMENT .)
    FALSE           reduce using rule 63 (unaryop -> INCREMENT .)


state 36

    (55) expression -> unaryop . expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 70

state 37

    (46) literal -> INTEGERLITERAL .

    COMMA           reduce using rule 46 (literal -> INTEGERLITERAL .)
    CLOSEPARAM      reduce using rule 46 (literal -> INTEGERLITERAL .)
    INCREMENT       reduce using rule 46 (literal -> INTEGERLITERAL .)
    DECREMENT       reduce using rule 46 (literal -> INTEGERLITERAL .)
    OPENARRAY       reduce using rule 46 (literal -> INTEGERLITERAL .)
    OF              reduce using rule 46 (literal -> INTEGERLITERAL .)
    MULTIPLY        reduce using rule 46 (literal -> INTEGERLITERAL .)
    DIVIDE          reduce using rule 46 (literal -> INTEGERLITERAL .)
    MODULO          reduce using rule 46 (literal -> INTEGERLITERAL .)
    PLUS            reduce using rule 46 (literal -> INTEGERLITERAL .)
    MINUS           reduce using rule 46 (literal -> INTEGERLITERAL .)
    AND             reduce using rule 46 (literal -> INTEGERLITERAL .)
    OR              reduce using rule 46 (literal -> INTEGERLITERAL .)
    LT              reduce using rule 46 (literal -> INTEGERLITERAL .)
    GT              reduce using rule 46 (literal -> INTEGERLITERAL .)
    LTE             reduce using rule 46 (literal -> INTEGERLITERAL .)
    GTE             reduce using rule 46 (literal -> INTEGERLITERAL .)
    EQUALCOMPARISON reduce using rule 46 (literal -> INTEGERLITERAL .)
    NOTEQUALS       reduce using rule 46 (literal -> INTEGERLITERAL .)
    NEWLINE         reduce using rule 46 (literal -> INTEGERLITERAL .)
    CONTINUE        reduce using rule 46 (literal -> INTEGERLITERAL .)
    BREAK           reduce using rule 46 (literal -> INTEGERLITERAL .)
    IF              reduce using rule 46 (literal -> INTEGERLITERAL .)
    WHILE           reduce using rule 46 (literal -> INTEGERLITERAL .)
    DO              reduce using rule 46 (literal -> INTEGERLITERAL .)
    RETURN          reduce using rule 46 (literal -> INTEGERLITERAL .)
    OPENPARAM       reduce using rule 46 (literal -> INTEGERLITERAL .)
    NOT             reduce using rule 46 (literal -> INTEGERLITERAL .)
    PERCENTAGE      reduce using rule 46 (literal -> INTEGERLITERAL .)
    ID              reduce using rule 46 (literal -> INTEGERLITERAL .)
    ARRAY           reduce using rule 46 (literal -> INTEGERLITERAL .)
    FUNCTION        reduce using rule 46 (literal -> INTEGERLITERAL .)
    STRUCTURE       reduce using rule 46 (literal -> INTEGERLITERAL .)
    STRINGLITERAL   reduce using rule 46 (literal -> INTEGERLITERAL .)
    INTEGERLITERAL  reduce using rule 46 (literal -> INTEGERLITERAL .)
    CHARLITERAL     reduce using rule 46 (literal -> INTEGERLITERAL .)
    DECIMALLITERAL  reduce using rule 46 (literal -> INTEGERLITERAL .)
    TRUE            reduce using rule 46 (literal -> INTEGERLITERAL .)
    FALSE           reduce using rule 46 (literal -> INTEGERLITERAL .)
    INTEGER         reduce using rule 46 (literal -> INTEGERLITERAL .)
    CHAR            reduce using rule 46 (literal -> INTEGERLITERAL .)
    STRING          reduce using rule 46 (literal -> INTEGERLITERAL .)
    BOOLEAN         reduce using rule 46 (literal -> INTEGERLITERAL .)
    DECIMAL         reduce using rule 46 (literal -> INTEGERLITERAL .)
    $end            reduce using rule 46 (literal -> INTEGERLITERAL .)
    ELSE            reduce using rule 46 (literal -> INTEGERLITERAL .)
    CLOSEARRAY      reduce using rule 46 (literal -> INTEGERLITERAL .)


state 38

    (95) type -> DECIMAL .

    ID              reduce using rule 95 (type -> DECIMAL .)


state 39

    (14) statement -> newline .

    CONTINUE        reduce using rule 14 (statement -> newline .)
    BREAK           reduce using rule 14 (statement -> newline .)
    IF              reduce using rule 14 (statement -> newline .)
    WHILE           reduce using rule 14 (statement -> newline .)
    DO              reduce using rule 14 (statement -> newline .)
    RETURN          reduce using rule 14 (statement -> newline .)
    NEWLINE         reduce using rule 14 (statement -> newline .)
    OPENPARAM       reduce using rule 14 (statement -> newline .)
    INCREMENT       reduce using rule 14 (statement -> newline .)
    DECREMENT       reduce using rule 14 (statement -> newline .)
    NOT             reduce using rule 14 (statement -> newline .)
    PLUS            reduce using rule 14 (statement -> newline .)
    MINUS           reduce using rule 14 (statement -> newline .)
    PERCENTAGE      reduce using rule 14 (statement -> newline .)
    ID              reduce using rule 14 (statement -> newline .)
    ARRAY           reduce using rule 14 (statement -> newline .)
    FUNCTION        reduce using rule 14 (statement -> newline .)
    STRUCTURE       reduce using rule 14 (statement -> newline .)
    STRINGLITERAL   reduce using rule 14 (statement -> newline .)
    INTEGERLITERAL  reduce using rule 14 (statement -> newline .)
    CHARLITERAL     reduce using rule 14 (statement -> newline .)
    DECIMALLITERAL  reduce using rule 14 (statement -> newline .)
    TRUE            reduce using rule 14 (statement -> newline .)
    FALSE           reduce using rule 14 (statement -> newline .)
    INTEGER         reduce using rule 14 (statement -> newline .)
    CHAR            reduce using rule 14 (statement -> newline .)
    STRING          reduce using rule 14 (statement -> newline .)
    BOOLEAN         reduce using rule 14 (statement -> newline .)
    DECIMAL         reduce using rule 14 (statement -> newline .)
    $end            reduce using rule 14 (statement -> newline .)
    ELSE            reduce using rule 14 (statement -> newline .)


state 40

    (12) statement -> simplestatement .

    CONTINUE        reduce using rule 12 (statement -> simplestatement .)
    BREAK           reduce using rule 12 (statement -> simplestatement .)
    IF              reduce using rule 12 (statement -> simplestatement .)
    WHILE           reduce using rule 12 (statement -> simplestatement .)
    DO              reduce using rule 12 (statement -> simplestatement .)
    RETURN          reduce using rule 12 (statement -> simplestatement .)
    NEWLINE         reduce using rule 12 (statement -> simplestatement .)
    OPENPARAM       reduce using rule 12 (statement -> simplestatement .)
    INCREMENT       reduce using rule 12 (statement -> simplestatement .)
    DECREMENT       reduce using rule 12 (statement -> simplestatement .)
    NOT             reduce using rule 12 (statement -> simplestatement .)
    PLUS            reduce using rule 12 (statement -> simplestatement .)
    MINUS           reduce using rule 12 (statement -> simplestatement .)
    PERCENTAGE      reduce using rule 12 (statement -> simplestatement .)
    ID              reduce using rule 12 (statement -> simplestatement .)
    ARRAY           reduce using rule 12 (statement -> simplestatement .)
    FUNCTION        reduce using rule 12 (statement -> simplestatement .)
    STRUCTURE       reduce using rule 12 (statement -> simplestatement .)
    STRINGLITERAL   reduce using rule 12 (statement -> simplestatement .)
    INTEGERLITERAL  reduce using rule 12 (statement -> simplestatement .)
    CHARLITERAL     reduce using rule 12 (statement -> simplestatement .)
    DECIMALLITERAL  reduce using rule 12 (statement -> simplestatement .)
    TRUE            reduce using rule 12 (statement -> simplestatement .)
    FALSE           reduce using rule 12 (statement -> simplestatement .)
    INTEGER         reduce using rule 12 (statement -> simplestatement .)
    CHAR            reduce using rule 12 (statement -> simplestatement .)
    STRING          reduce using rule 12 (statement -> simplestatement .)
    BOOLEAN         reduce using rule 12 (statement -> simplestatement .)
    DECIMAL         reduce using rule 12 (statement -> simplestatement .)
    $end            reduce using rule 12 (statement -> simplestatement .)
    ELSE            reduce using rule 12 (statement -> simplestatement .)


state 41

    (91) type -> INTEGER .

    ID              reduce using rule 91 (type -> INTEGER .)


state 42

    (56) expression -> indexaccess .

    INCREMENT       reduce using rule 56 (expression -> indexaccess .)
    DECREMENT       reduce using rule 56 (expression -> indexaccess .)
    OPENARRAY       reduce using rule 56 (expression -> indexaccess .)
    OF              reduce using rule 56 (expression -> indexaccess .)
    MULTIPLY        reduce using rule 56 (expression -> indexaccess .)
    DIVIDE          reduce using rule 56 (expression -> indexaccess .)
    MODULO          reduce using rule 56 (expression -> indexaccess .)
    PLUS            reduce using rule 56 (expression -> indexaccess .)
    MINUS           reduce using rule 56 (expression -> indexaccess .)
    AND             reduce using rule 56 (expression -> indexaccess .)
    OR              reduce using rule 56 (expression -> indexaccess .)
    LT              reduce using rule 56 (expression -> indexaccess .)
    GT              reduce using rule 56 (expression -> indexaccess .)
    LTE             reduce using rule 56 (expression -> indexaccess .)
    GTE             reduce using rule 56 (expression -> indexaccess .)
    EQUALCOMPARISON reduce using rule 56 (expression -> indexaccess .)
    NOTEQUALS       reduce using rule 56 (expression -> indexaccess .)
    NEWLINE         reduce using rule 56 (expression -> indexaccess .)
    WHILE           reduce using rule 56 (expression -> indexaccess .)
    CONTINUE        reduce using rule 56 (expression -> indexaccess .)
    BREAK           reduce using rule 56 (expression -> indexaccess .)
    IF              reduce using rule 56 (expression -> indexaccess .)
    DO              reduce using rule 56 (expression -> indexaccess .)
    RETURN          reduce using rule 56 (expression -> indexaccess .)
    OPENPARAM       reduce using rule 56 (expression -> indexaccess .)
    NOT             reduce using rule 56 (expression -> indexaccess .)
    PERCENTAGE      reduce using rule 56 (expression -> indexaccess .)
    ID              reduce using rule 56 (expression -> indexaccess .)
    ARRAY           reduce using rule 56 (expression -> indexaccess .)
    FUNCTION        reduce using rule 56 (expression -> indexaccess .)
    STRUCTURE       reduce using rule 56 (expression -> indexaccess .)
    STRINGLITERAL   reduce using rule 56 (expression -> indexaccess .)
    INTEGERLITERAL  reduce using rule 56 (expression -> indexaccess .)
    CHARLITERAL     reduce using rule 56 (expression -> indexaccess .)
    DECIMALLITERAL  reduce using rule 56 (expression -> indexaccess .)
    TRUE            reduce using rule 56 (expression -> indexaccess .)
    FALSE           reduce using rule 56 (expression -> indexaccess .)
    INTEGER         reduce using rule 56 (expression -> indexaccess .)
    CHAR            reduce using rule 56 (expression -> indexaccess .)
    STRING          reduce using rule 56 (expression -> indexaccess .)
    BOOLEAN         reduce using rule 56 (expression -> indexaccess .)
    DECIMAL         reduce using rule 56 (expression -> indexaccess .)
    $end            reduce using rule 56 (expression -> indexaccess .)
    ELSE            reduce using rule 56 (expression -> indexaccess .)
    CLOSEPARAM      reduce using rule 56 (expression -> indexaccess .)
    CLOSEARRAY      reduce using rule 56 (expression -> indexaccess .)


state 43

    (28) dec -> functiondec .
    (43) functiondefn -> functiondec . newline BEGIN block returnstatement END newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 28 (dec -> functiondec .) ]

    newline                        shift and go to state 71

state 44

    (84) functioncall -> ID . OPENPARAM callarguments CLOSEPARAM
    (90) primaryexpression -> ID .

  ! shift/reduce conflict for OPENPARAM resolved as shift
    OPENPARAM       shift and go to state 72
    CLOSEPARAM      reduce using rule 90 (primaryexpression -> ID .)
    INCREMENT       reduce using rule 90 (primaryexpression -> ID .)
    DECREMENT       reduce using rule 90 (primaryexpression -> ID .)
    OPENARRAY       reduce using rule 90 (primaryexpression -> ID .)
    OF              reduce using rule 90 (primaryexpression -> ID .)
    MULTIPLY        reduce using rule 90 (primaryexpression -> ID .)
    DIVIDE          reduce using rule 90 (primaryexpression -> ID .)
    MODULO          reduce using rule 90 (primaryexpression -> ID .)
    PLUS            reduce using rule 90 (primaryexpression -> ID .)
    MINUS           reduce using rule 90 (primaryexpression -> ID .)
    AND             reduce using rule 90 (primaryexpression -> ID .)
    OR              reduce using rule 90 (primaryexpression -> ID .)
    LT              reduce using rule 90 (primaryexpression -> ID .)
    GT              reduce using rule 90 (primaryexpression -> ID .)
    LTE             reduce using rule 90 (primaryexpression -> ID .)
    GTE             reduce using rule 90 (primaryexpression -> ID .)
    EQUALCOMPARISON reduce using rule 90 (primaryexpression -> ID .)
    NOTEQUALS       reduce using rule 90 (primaryexpression -> ID .)
    NEWLINE         reduce using rule 90 (primaryexpression -> ID .)
    CONTINUE        reduce using rule 90 (primaryexpression -> ID .)
    BREAK           reduce using rule 90 (primaryexpression -> ID .)
    IF              reduce using rule 90 (primaryexpression -> ID .)
    WHILE           reduce using rule 90 (primaryexpression -> ID .)
    DO              reduce using rule 90 (primaryexpression -> ID .)
    RETURN          reduce using rule 90 (primaryexpression -> ID .)
    NOT             reduce using rule 90 (primaryexpression -> ID .)
    PERCENTAGE      reduce using rule 90 (primaryexpression -> ID .)
    ID              reduce using rule 90 (primaryexpression -> ID .)
    ARRAY           reduce using rule 90 (primaryexpression -> ID .)
    FUNCTION        reduce using rule 90 (primaryexpression -> ID .)
    STRUCTURE       reduce using rule 90 (primaryexpression -> ID .)
    STRINGLITERAL   reduce using rule 90 (primaryexpression -> ID .)
    INTEGERLITERAL  reduce using rule 90 (primaryexpression -> ID .)
    CHARLITERAL     reduce using rule 90 (primaryexpression -> ID .)
    DECIMALLITERAL  reduce using rule 90 (primaryexpression -> ID .)
    TRUE            reduce using rule 90 (primaryexpression -> ID .)
    FALSE           reduce using rule 90 (primaryexpression -> ID .)
    INTEGER         reduce using rule 90 (primaryexpression -> ID .)
    CHAR            reduce using rule 90 (primaryexpression -> ID .)
    STRING          reduce using rule 90 (primaryexpression -> ID .)
    BOOLEAN         reduce using rule 90 (primaryexpression -> ID .)
    DECIMAL         reduce using rule 90 (primaryexpression -> ID .)
    $end            reduce using rule 90 (primaryexpression -> ID .)
    ELSE            reduce using rule 90 (primaryexpression -> ID .)
    CLOSEARRAY      reduce using rule 90 (primaryexpression -> ID .)

  ! OPENPARAM       [ reduce using rule 90 (primaryexpression -> ID .) ]


state 45

    (17) ifstatement -> IF . OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> IF . OPENPARAM expression CLOSEPARAM statement ELSE statement

    OPENPARAM       shift and go to state 73


state 46

    (92) type -> CHAR .

    ID              reduce using rule 92 (type -> CHAR .)


state 47

    (50) literal -> FALSE .

    COMMA           reduce using rule 50 (literal -> FALSE .)
    CLOSEPARAM      reduce using rule 50 (literal -> FALSE .)
    INCREMENT       reduce using rule 50 (literal -> FALSE .)
    DECREMENT       reduce using rule 50 (literal -> FALSE .)
    OPENARRAY       reduce using rule 50 (literal -> FALSE .)
    OF              reduce using rule 50 (literal -> FALSE .)
    MULTIPLY        reduce using rule 50 (literal -> FALSE .)
    DIVIDE          reduce using rule 50 (literal -> FALSE .)
    MODULO          reduce using rule 50 (literal -> FALSE .)
    PLUS            reduce using rule 50 (literal -> FALSE .)
    MINUS           reduce using rule 50 (literal -> FALSE .)
    AND             reduce using rule 50 (literal -> FALSE .)
    OR              reduce using rule 50 (literal -> FALSE .)
    LT              reduce using rule 50 (literal -> FALSE .)
    GT              reduce using rule 50 (literal -> FALSE .)
    LTE             reduce using rule 50 (literal -> FALSE .)
    GTE             reduce using rule 50 (literal -> FALSE .)
    EQUALCOMPARISON reduce using rule 50 (literal -> FALSE .)
    NOTEQUALS       reduce using rule 50 (literal -> FALSE .)
    NEWLINE         reduce using rule 50 (literal -> FALSE .)
    CONTINUE        reduce using rule 50 (literal -> FALSE .)
    BREAK           reduce using rule 50 (literal -> FALSE .)
    IF              reduce using rule 50 (literal -> FALSE .)
    WHILE           reduce using rule 50 (literal -> FALSE .)
    DO              reduce using rule 50 (literal -> FALSE .)
    RETURN          reduce using rule 50 (literal -> FALSE .)
    OPENPARAM       reduce using rule 50 (literal -> FALSE .)
    NOT             reduce using rule 50 (literal -> FALSE .)
    PERCENTAGE      reduce using rule 50 (literal -> FALSE .)
    ID              reduce using rule 50 (literal -> FALSE .)
    ARRAY           reduce using rule 50 (literal -> FALSE .)
    FUNCTION        reduce using rule 50 (literal -> FALSE .)
    STRUCTURE       reduce using rule 50 (literal -> FALSE .)
    STRINGLITERAL   reduce using rule 50 (literal -> FALSE .)
    INTEGERLITERAL  reduce using rule 50 (literal -> FALSE .)
    CHARLITERAL     reduce using rule 50 (literal -> FALSE .)
    DECIMALLITERAL  reduce using rule 50 (literal -> FALSE .)
    TRUE            reduce using rule 50 (literal -> FALSE .)
    FALSE           reduce using rule 50 (literal -> FALSE .)
    INTEGER         reduce using rule 50 (literal -> FALSE .)
    CHAR            reduce using rule 50 (literal -> FALSE .)
    STRING          reduce using rule 50 (literal -> FALSE .)
    BOOLEAN         reduce using rule 50 (literal -> FALSE .)
    DECIMAL         reduce using rule 50 (literal -> FALSE .)
    $end            reduce using rule 50 (literal -> FALSE .)
    ELSE            reduce using rule 50 (literal -> FALSE .)
    CLOSEARRAY      reduce using rule 50 (literal -> FALSE .)


state 48

    (64) unaryop -> DECREMENT .

    OPENPARAM       reduce using rule 64 (unaryop -> DECREMENT .)
    INCREMENT       reduce using rule 64 (unaryop -> DECREMENT .)
    DECREMENT       reduce using rule 64 (unaryop -> DECREMENT .)
    NOT             reduce using rule 64 (unaryop -> DECREMENT .)
    PLUS            reduce using rule 64 (unaryop -> DECREMENT .)
    MINUS           reduce using rule 64 (unaryop -> DECREMENT .)
    PERCENTAGE      reduce using rule 64 (unaryop -> DECREMENT .)
    ID              reduce using rule 64 (unaryop -> DECREMENT .)
    STRINGLITERAL   reduce using rule 64 (unaryop -> DECREMENT .)
    INTEGERLITERAL  reduce using rule 64 (unaryop -> DECREMENT .)
    CHARLITERAL     reduce using rule 64 (unaryop -> DECREMENT .)
    DECIMALLITERAL  reduce using rule 64 (unaryop -> DECREMENT .)
    TRUE            reduce using rule 64 (unaryop -> DECREMENT .)
    FALSE           reduce using rule 64 (unaryop -> DECREMENT .)


state 49

    (30) dec -> structuredec .

    NEWLINE         reduce using rule 30 (dec -> structuredec .)


state 50

    (10) statement -> BREAK . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 74

state 51

    (9) statement -> CONTINUE . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 75

state 52

    (58) expression -> functioncall .

    INCREMENT       reduce using rule 58 (expression -> functioncall .)
    DECREMENT       reduce using rule 58 (expression -> functioncall .)
    OPENARRAY       reduce using rule 58 (expression -> functioncall .)
    OF              reduce using rule 58 (expression -> functioncall .)
    MULTIPLY        reduce using rule 58 (expression -> functioncall .)
    DIVIDE          reduce using rule 58 (expression -> functioncall .)
    MODULO          reduce using rule 58 (expression -> functioncall .)
    PLUS            reduce using rule 58 (expression -> functioncall .)
    MINUS           reduce using rule 58 (expression -> functioncall .)
    AND             reduce using rule 58 (expression -> functioncall .)
    OR              reduce using rule 58 (expression -> functioncall .)
    LT              reduce using rule 58 (expression -> functioncall .)
    GT              reduce using rule 58 (expression -> functioncall .)
    LTE             reduce using rule 58 (expression -> functioncall .)
    GTE             reduce using rule 58 (expression -> functioncall .)
    EQUALCOMPARISON reduce using rule 58 (expression -> functioncall .)
    NOTEQUALS       reduce using rule 58 (expression -> functioncall .)
    NEWLINE         reduce using rule 58 (expression -> functioncall .)
    WHILE           reduce using rule 58 (expression -> functioncall .)
    CONTINUE        reduce using rule 58 (expression -> functioncall .)
    BREAK           reduce using rule 58 (expression -> functioncall .)
    IF              reduce using rule 58 (expression -> functioncall .)
    DO              reduce using rule 58 (expression -> functioncall .)
    RETURN          reduce using rule 58 (expression -> functioncall .)
    OPENPARAM       reduce using rule 58 (expression -> functioncall .)
    NOT             reduce using rule 58 (expression -> functioncall .)
    PERCENTAGE      reduce using rule 58 (expression -> functioncall .)
    ID              reduce using rule 58 (expression -> functioncall .)
    ARRAY           reduce using rule 58 (expression -> functioncall .)
    FUNCTION        reduce using rule 58 (expression -> functioncall .)
    STRUCTURE       reduce using rule 58 (expression -> functioncall .)
    STRINGLITERAL   reduce using rule 58 (expression -> functioncall .)
    INTEGERLITERAL  reduce using rule 58 (expression -> functioncall .)
    CHARLITERAL     reduce using rule 58 (expression -> functioncall .)
    DECIMALLITERAL  reduce using rule 58 (expression -> functioncall .)
    TRUE            reduce using rule 58 (expression -> functioncall .)
    FALSE           reduce using rule 58 (expression -> functioncall .)
    INTEGER         reduce using rule 58 (expression -> functioncall .)
    CHAR            reduce using rule 58 (expression -> functioncall .)
    STRING          reduce using rule 58 (expression -> functioncall .)
    BOOLEAN         reduce using rule 58 (expression -> functioncall .)
    DECIMAL         reduce using rule 58 (expression -> functioncall .)
    $end            reduce using rule 58 (expression -> functioncall .)
    ELSE            reduce using rule 58 (expression -> functioncall .)
    CLOSEPARAM      reduce using rule 58 (expression -> functioncall .)
    CLOSEARRAY      reduce using rule 58 (expression -> functioncall .)


state 53

    (44) structuredec -> STRUCTURE . ID newline BEGIN newline decs END newline

    ID              shift and go to state 76


state 54

    (65) unaryop -> NOT .

    OPENPARAM       reduce using rule 65 (unaryop -> NOT .)
    INCREMENT       reduce using rule 65 (unaryop -> NOT .)
    DECREMENT       reduce using rule 65 (unaryop -> NOT .)
    NOT             reduce using rule 65 (unaryop -> NOT .)
    PLUS            reduce using rule 65 (unaryop -> NOT .)
    MINUS           reduce using rule 65 (unaryop -> NOT .)
    PERCENTAGE      reduce using rule 65 (unaryop -> NOT .)
    ID              reduce using rule 65 (unaryop -> NOT .)
    STRINGLITERAL   reduce using rule 65 (unaryop -> NOT .)
    INTEGERLITERAL  reduce using rule 65 (unaryop -> NOT .)
    CHARLITERAL     reduce using rule 65 (unaryop -> NOT .)
    DECIMALLITERAL  reduce using rule 65 (unaryop -> NOT .)
    TRUE            reduce using rule 65 (unaryop -> NOT .)
    FALSE           reduce using rule 65 (unaryop -> NOT .)


state 55

    (11) statement -> returnstatement .

    CONTINUE        reduce using rule 11 (statement -> returnstatement .)
    BREAK           reduce using rule 11 (statement -> returnstatement .)
    IF              reduce using rule 11 (statement -> returnstatement .)
    WHILE           reduce using rule 11 (statement -> returnstatement .)
    DO              reduce using rule 11 (statement -> returnstatement .)
    RETURN          reduce using rule 11 (statement -> returnstatement .)
    NEWLINE         reduce using rule 11 (statement -> returnstatement .)
    OPENPARAM       reduce using rule 11 (statement -> returnstatement .)
    INCREMENT       reduce using rule 11 (statement -> returnstatement .)
    DECREMENT       reduce using rule 11 (statement -> returnstatement .)
    NOT             reduce using rule 11 (statement -> returnstatement .)
    PLUS            reduce using rule 11 (statement -> returnstatement .)
    MINUS           reduce using rule 11 (statement -> returnstatement .)
    PERCENTAGE      reduce using rule 11 (statement -> returnstatement .)
    ID              reduce using rule 11 (statement -> returnstatement .)
    ARRAY           reduce using rule 11 (statement -> returnstatement .)
    FUNCTION        reduce using rule 11 (statement -> returnstatement .)
    STRUCTURE       reduce using rule 11 (statement -> returnstatement .)
    STRINGLITERAL   reduce using rule 11 (statement -> returnstatement .)
    INTEGERLITERAL  reduce using rule 11 (statement -> returnstatement .)
    CHARLITERAL     reduce using rule 11 (statement -> returnstatement .)
    DECIMALLITERAL  reduce using rule 11 (statement -> returnstatement .)
    TRUE            reduce using rule 11 (statement -> returnstatement .)
    FALSE           reduce using rule 11 (statement -> returnstatement .)
    INTEGER         reduce using rule 11 (statement -> returnstatement .)
    CHAR            reduce using rule 11 (statement -> returnstatement .)
    STRING          reduce using rule 11 (statement -> returnstatement .)
    BOOLEAN         reduce using rule 11 (statement -> returnstatement .)
    DECIMAL         reduce using rule 11 (statement -> returnstatement .)
    $end            reduce using rule 11 (statement -> returnstatement .)
    ELSE            reduce using rule 11 (statement -> returnstatement .)


state 56

    (24) decs -> dec . newline decs
    (25) decs -> dec . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 77

state 57

    (23) simplestatement -> expression .
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    CONTINUE        reduce using rule 23 (simplestatement -> expression .)
    BREAK           reduce using rule 23 (simplestatement -> expression .)
    IF              reduce using rule 23 (simplestatement -> expression .)
    WHILE           reduce using rule 23 (simplestatement -> expression .)
    DO              reduce using rule 23 (simplestatement -> expression .)
    RETURN          reduce using rule 23 (simplestatement -> expression .)
    OPENPARAM       reduce using rule 23 (simplestatement -> expression .)
    NOT             reduce using rule 23 (simplestatement -> expression .)
    PERCENTAGE      reduce using rule 23 (simplestatement -> expression .)
    ID              reduce using rule 23 (simplestatement -> expression .)
    ARRAY           reduce using rule 23 (simplestatement -> expression .)
    FUNCTION        reduce using rule 23 (simplestatement -> expression .)
    STRUCTURE       reduce using rule 23 (simplestatement -> expression .)
    STRINGLITERAL   reduce using rule 23 (simplestatement -> expression .)
    INTEGERLITERAL  reduce using rule 23 (simplestatement -> expression .)
    CHARLITERAL     reduce using rule 23 (simplestatement -> expression .)
    DECIMALLITERAL  reduce using rule 23 (simplestatement -> expression .)
    TRUE            reduce using rule 23 (simplestatement -> expression .)
    FALSE           reduce using rule 23 (simplestatement -> expression .)
    INTEGER         reduce using rule 23 (simplestatement -> expression .)
    CHAR            reduce using rule 23 (simplestatement -> expression .)
    STRING          reduce using rule 23 (simplestatement -> expression .)
    BOOLEAN         reduce using rule 23 (simplestatement -> expression .)
    DECIMAL         reduce using rule 23 (simplestatement -> expression .)
    $end            reduce using rule 23 (simplestatement -> expression .)
    ELSE            reduce using rule 23 (simplestatement -> expression .)
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 23 (simplestatement -> expression .) ]
  ! INCREMENT       [ reduce using rule 23 (simplestatement -> expression .) ]
  ! DECREMENT       [ reduce using rule 23 (simplestatement -> expression .) ]
  ! PLUS            [ reduce using rule 23 (simplestatement -> expression .) ]
  ! MINUS           [ reduce using rule 23 (simplestatement -> expression .) ]

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 58

    (5) statement -> block .

    CONTINUE        reduce using rule 5 (statement -> block .)
    BREAK           reduce using rule 5 (statement -> block .)
    IF              reduce using rule 5 (statement -> block .)
    WHILE           reduce using rule 5 (statement -> block .)
    DO              reduce using rule 5 (statement -> block .)
    RETURN          reduce using rule 5 (statement -> block .)
    NEWLINE         reduce using rule 5 (statement -> block .)
    OPENPARAM       reduce using rule 5 (statement -> block .)
    INCREMENT       reduce using rule 5 (statement -> block .)
    DECREMENT       reduce using rule 5 (statement -> block .)
    NOT             reduce using rule 5 (statement -> block .)
    PLUS            reduce using rule 5 (statement -> block .)
    MINUS           reduce using rule 5 (statement -> block .)
    PERCENTAGE      reduce using rule 5 (statement -> block .)
    ID              reduce using rule 5 (statement -> block .)
    ARRAY           reduce using rule 5 (statement -> block .)
    FUNCTION        reduce using rule 5 (statement -> block .)
    STRUCTURE       reduce using rule 5 (statement -> block .)
    STRINGLITERAL   reduce using rule 5 (statement -> block .)
    INTEGERLITERAL  reduce using rule 5 (statement -> block .)
    CHARLITERAL     reduce using rule 5 (statement -> block .)
    DECIMALLITERAL  reduce using rule 5 (statement -> block .)
    TRUE            reduce using rule 5 (statement -> block .)
    FALSE           reduce using rule 5 (statement -> block .)
    INTEGER         reduce using rule 5 (statement -> block .)
    CHAR            reduce using rule 5 (statement -> block .)
    STRING          reduce using rule 5 (statement -> block .)
    BOOLEAN         reduce using rule 5 (statement -> block .)
    DECIMAL         reduce using rule 5 (statement -> block .)
    $end            reduce using rule 5 (statement -> block .)
    ELSE            reduce using rule 5 (statement -> block .)


state 59

    (6) statement -> ifstatement .

    CONTINUE        reduce using rule 6 (statement -> ifstatement .)
    BREAK           reduce using rule 6 (statement -> ifstatement .)
    IF              reduce using rule 6 (statement -> ifstatement .)
    WHILE           reduce using rule 6 (statement -> ifstatement .)
    DO              reduce using rule 6 (statement -> ifstatement .)
    RETURN          reduce using rule 6 (statement -> ifstatement .)
    NEWLINE         reduce using rule 6 (statement -> ifstatement .)
    OPENPARAM       reduce using rule 6 (statement -> ifstatement .)
    INCREMENT       reduce using rule 6 (statement -> ifstatement .)
    DECREMENT       reduce using rule 6 (statement -> ifstatement .)
    NOT             reduce using rule 6 (statement -> ifstatement .)
    PLUS            reduce using rule 6 (statement -> ifstatement .)
    MINUS           reduce using rule 6 (statement -> ifstatement .)
    PERCENTAGE      reduce using rule 6 (statement -> ifstatement .)
    ID              reduce using rule 6 (statement -> ifstatement .)
    ARRAY           reduce using rule 6 (statement -> ifstatement .)
    FUNCTION        reduce using rule 6 (statement -> ifstatement .)
    STRUCTURE       reduce using rule 6 (statement -> ifstatement .)
    STRINGLITERAL   reduce using rule 6 (statement -> ifstatement .)
    INTEGERLITERAL  reduce using rule 6 (statement -> ifstatement .)
    CHARLITERAL     reduce using rule 6 (statement -> ifstatement .)
    DECIMALLITERAL  reduce using rule 6 (statement -> ifstatement .)
    TRUE            reduce using rule 6 (statement -> ifstatement .)
    FALSE           reduce using rule 6 (statement -> ifstatement .)
    INTEGER         reduce using rule 6 (statement -> ifstatement .)
    CHAR            reduce using rule 6 (statement -> ifstatement .)
    STRING          reduce using rule 6 (statement -> ifstatement .)
    BOOLEAN         reduce using rule 6 (statement -> ifstatement .)
    DECIMAL         reduce using rule 6 (statement -> ifstatement .)
    $end            reduce using rule 6 (statement -> ifstatement .)
    ELSE            reduce using rule 6 (statement -> ifstatement .)


state 60

    (20) dowhilestatement -> DO statement . WHILE OPENPARAM expression CLOSEPARAM newline
    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    WHILE           shift and go to state 97
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 61

    (21) returnstatement -> RETURN expression . newline
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS

    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    NEWLINE         shift and go to state 4
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78

    biop                           shift and go to state 83
    newline                        shift and go to state 98

state 62

    (59) expression -> OPENPARAM expression . CLOSEPARAM
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    CLOSEPARAM      shift and go to state 99
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 63

    (36) arraydec -> ARRAY type . ID newline
    (37) arraydec -> ARRAY type . ID EQUALS OPENARRAY literalslist CLOSEARRAY newline

    ID              shift and go to state 100


state 64

    (19) whilestatement -> WHILE OPENPARAM . expression CLOSEPARAM newline statement
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 101

state 65

    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    $end            reduce using rule 15 (block -> statement .)
    ELSE            reduce using rule 15 (block -> statement .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]
  ! $end            [ reduce using rule 96 (empty -> .) ]
  ! ELSE            [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 66

    (16) block -> statement block .
    (5) statement -> block .

  ! reduce/reduce conflict for CONTINUE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for DO resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for PLUS resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for MINUS resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for ARRAY resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for INTEGER resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for STRING resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for $end resolved using rule 5 (statement -> block .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> block .)
    CONTINUE        reduce using rule 5 (statement -> block .)
    BREAK           reduce using rule 5 (statement -> block .)
    IF              reduce using rule 5 (statement -> block .)
    WHILE           reduce using rule 5 (statement -> block .)
    DO              reduce using rule 5 (statement -> block .)
    RETURN          reduce using rule 5 (statement -> block .)
    NEWLINE         reduce using rule 5 (statement -> block .)
    OPENPARAM       reduce using rule 5 (statement -> block .)
    INCREMENT       reduce using rule 5 (statement -> block .)
    DECREMENT       reduce using rule 5 (statement -> block .)
    NOT             reduce using rule 5 (statement -> block .)
    PLUS            reduce using rule 5 (statement -> block .)
    MINUS           reduce using rule 5 (statement -> block .)
    PERCENTAGE      reduce using rule 5 (statement -> block .)
    ID              reduce using rule 5 (statement -> block .)
    ARRAY           reduce using rule 5 (statement -> block .)
    FUNCTION        reduce using rule 5 (statement -> block .)
    STRUCTURE       reduce using rule 5 (statement -> block .)
    STRINGLITERAL   reduce using rule 5 (statement -> block .)
    INTEGERLITERAL  reduce using rule 5 (statement -> block .)
    CHARLITERAL     reduce using rule 5 (statement -> block .)
    DECIMALLITERAL  reduce using rule 5 (statement -> block .)
    TRUE            reduce using rule 5 (statement -> block .)
    FALSE           reduce using rule 5 (statement -> block .)
    INTEGER         reduce using rule 5 (statement -> block .)
    CHAR            reduce using rule 5 (statement -> block .)
    STRING          reduce using rule 5 (statement -> block .)
    BOOLEAN         reduce using rule 5 (statement -> block .)
    DECIMAL         reduce using rule 5 (statement -> block .)
    $end            reduce using rule 5 (statement -> block .)
    ELSE            reduce using rule 5 (statement -> block .)

  ! CONTINUE        [ reduce using rule 16 (block -> statement block .) ]
  ! BREAK           [ reduce using rule 16 (block -> statement block .) ]
  ! IF              [ reduce using rule 16 (block -> statement block .) ]
  ! WHILE           [ reduce using rule 16 (block -> statement block .) ]
  ! DO              [ reduce using rule 16 (block -> statement block .) ]
  ! RETURN          [ reduce using rule 16 (block -> statement block .) ]
  ! NEWLINE         [ reduce using rule 16 (block -> statement block .) ]
  ! OPENPARAM       [ reduce using rule 16 (block -> statement block .) ]
  ! INCREMENT       [ reduce using rule 16 (block -> statement block .) ]
  ! DECREMENT       [ reduce using rule 16 (block -> statement block .) ]
  ! NOT             [ reduce using rule 16 (block -> statement block .) ]
  ! PLUS            [ reduce using rule 16 (block -> statement block .) ]
  ! MINUS           [ reduce using rule 16 (block -> statement block .) ]
  ! PERCENTAGE      [ reduce using rule 16 (block -> statement block .) ]
  ! ID              [ reduce using rule 16 (block -> statement block .) ]
  ! ARRAY           [ reduce using rule 16 (block -> statement block .) ]
  ! FUNCTION        [ reduce using rule 16 (block -> statement block .) ]
  ! STRUCTURE       [ reduce using rule 16 (block -> statement block .) ]
  ! STRINGLITERAL   [ reduce using rule 16 (block -> statement block .) ]
  ! INTEGERLITERAL  [ reduce using rule 16 (block -> statement block .) ]
  ! CHARLITERAL     [ reduce using rule 16 (block -> statement block .) ]
  ! DECIMALLITERAL  [ reduce using rule 16 (block -> statement block .) ]
  ! TRUE            [ reduce using rule 16 (block -> statement block .) ]
  ! FALSE           [ reduce using rule 16 (block -> statement block .) ]
  ! INTEGER         [ reduce using rule 16 (block -> statement block .) ]
  ! CHAR            [ reduce using rule 16 (block -> statement block .) ]
  ! STRING          [ reduce using rule 16 (block -> statement block .) ]
  ! BOOLEAN         [ reduce using rule 16 (block -> statement block .) ]
  ! DECIMAL         [ reduce using rule 16 (block -> statement block .) ]
  ! $end            [ reduce using rule 16 (block -> statement block .) ]
  ! ELSE            [ reduce using rule 16 (block -> statement block .) ]


state 67

    (31) vardec -> type iddec .

    NEWLINE         reduce using rule 31 (vardec -> type iddec .)


state 68

    (32) iddec -> ID . newline
    (33) iddec -> ID . COMMA iddec
    (34) iddec -> ID . EQUALS literal newline
    (35) iddec -> ID . EQUALS literal COMMA iddec
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    COMMA           shift and go to state 104
    EQUALS          shift and go to state 103
    NEWLINE         shift and go to state 4

    newline                        shift and go to state 102

state 69

    (38) functiondec -> FUNCTION ID . OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> FUNCTION ID . OPENPARAM paramlist CLOSEPARAM newline

    OPENPARAM       shift and go to state 105


state 70

    (55) expression -> unaryop expression .
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for OPENARRAY resolved as shift
  ! shift/reduce conflict for OF resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALCOMPARISON resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    WHILE           reduce using rule 55 (expression -> unaryop expression .)
    CONTINUE        reduce using rule 55 (expression -> unaryop expression .)
    BREAK           reduce using rule 55 (expression -> unaryop expression .)
    IF              reduce using rule 55 (expression -> unaryop expression .)
    DO              reduce using rule 55 (expression -> unaryop expression .)
    RETURN          reduce using rule 55 (expression -> unaryop expression .)
    OPENPARAM       reduce using rule 55 (expression -> unaryop expression .)
    NOT             reduce using rule 55 (expression -> unaryop expression .)
    PERCENTAGE      reduce using rule 55 (expression -> unaryop expression .)
    ID              reduce using rule 55 (expression -> unaryop expression .)
    ARRAY           reduce using rule 55 (expression -> unaryop expression .)
    FUNCTION        reduce using rule 55 (expression -> unaryop expression .)
    STRUCTURE       reduce using rule 55 (expression -> unaryop expression .)
    STRINGLITERAL   reduce using rule 55 (expression -> unaryop expression .)
    INTEGERLITERAL  reduce using rule 55 (expression -> unaryop expression .)
    CHARLITERAL     reduce using rule 55 (expression -> unaryop expression .)
    DECIMALLITERAL  reduce using rule 55 (expression -> unaryop expression .)
    TRUE            reduce using rule 55 (expression -> unaryop expression .)
    FALSE           reduce using rule 55 (expression -> unaryop expression .)
    INTEGER         reduce using rule 55 (expression -> unaryop expression .)
    CHAR            reduce using rule 55 (expression -> unaryop expression .)
    STRING          reduce using rule 55 (expression -> unaryop expression .)
    BOOLEAN         reduce using rule 55 (expression -> unaryop expression .)
    DECIMAL         reduce using rule 55 (expression -> unaryop expression .)
    $end            reduce using rule 55 (expression -> unaryop expression .)
    ELSE            reduce using rule 55 (expression -> unaryop expression .)
    CLOSEPARAM      reduce using rule 55 (expression -> unaryop expression .)
    CLOSEARRAY      reduce using rule 55 (expression -> unaryop expression .)
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

  ! INCREMENT       [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! DECREMENT       [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! OPENARRAY       [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! OF              [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! MODULO          [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! PLUS            [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! AND             [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! OR              [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! LT              [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! GT              [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! LTE             [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! GTE             [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! EQUALCOMPARISON [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! NOTEQUALS       [ reduce using rule 55 (expression -> unaryop expression .) ]
  ! NEWLINE         [ reduce using rule 55 (expression -> unaryop expression .) ]

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 71

    (43) functiondefn -> functiondec newline . BEGIN block returnstatement END newline

    BEGIN           shift and go to state 106


state 72

    (84) functioncall -> ID OPENPARAM . callarguments CLOSEPARAM
    (85) callarguments -> . ID
    (86) callarguments -> . literalslist
    (87) callarguments -> . ID COMMA callarguments
    (88) callarguments -> . literalslist COMMA callarguments
    (51) literalslist -> . literal
    (52) literalslist -> . literal COMMA literalslist
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    ID              shift and go to state 110
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literalslist                   shift and go to state 109
    callarguments                  shift and go to state 107
    literal                        shift and go to state 108

state 73

    (17) ifstatement -> IF OPENPARAM . expression CLOSEPARAM statement
    (18) ifstatement -> IF OPENPARAM . expression CLOSEPARAM statement ELSE statement
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 111

state 74

    (10) statement -> BREAK newline .

    CONTINUE        reduce using rule 10 (statement -> BREAK newline .)
    BREAK           reduce using rule 10 (statement -> BREAK newline .)
    IF              reduce using rule 10 (statement -> BREAK newline .)
    WHILE           reduce using rule 10 (statement -> BREAK newline .)
    DO              reduce using rule 10 (statement -> BREAK newline .)
    RETURN          reduce using rule 10 (statement -> BREAK newline .)
    NEWLINE         reduce using rule 10 (statement -> BREAK newline .)
    OPENPARAM       reduce using rule 10 (statement -> BREAK newline .)
    INCREMENT       reduce using rule 10 (statement -> BREAK newline .)
    DECREMENT       reduce using rule 10 (statement -> BREAK newline .)
    NOT             reduce using rule 10 (statement -> BREAK newline .)
    PLUS            reduce using rule 10 (statement -> BREAK newline .)
    MINUS           reduce using rule 10 (statement -> BREAK newline .)
    PERCENTAGE      reduce using rule 10 (statement -> BREAK newline .)
    ID              reduce using rule 10 (statement -> BREAK newline .)
    ARRAY           reduce using rule 10 (statement -> BREAK newline .)
    FUNCTION        reduce using rule 10 (statement -> BREAK newline .)
    STRUCTURE       reduce using rule 10 (statement -> BREAK newline .)
    STRINGLITERAL   reduce using rule 10 (statement -> BREAK newline .)
    INTEGERLITERAL  reduce using rule 10 (statement -> BREAK newline .)
    CHARLITERAL     reduce using rule 10 (statement -> BREAK newline .)
    DECIMALLITERAL  reduce using rule 10 (statement -> BREAK newline .)
    TRUE            reduce using rule 10 (statement -> BREAK newline .)
    FALSE           reduce using rule 10 (statement -> BREAK newline .)
    INTEGER         reduce using rule 10 (statement -> BREAK newline .)
    CHAR            reduce using rule 10 (statement -> BREAK newline .)
    STRING          reduce using rule 10 (statement -> BREAK newline .)
    BOOLEAN         reduce using rule 10 (statement -> BREAK newline .)
    DECIMAL         reduce using rule 10 (statement -> BREAK newline .)
    $end            reduce using rule 10 (statement -> BREAK newline .)
    ELSE            reduce using rule 10 (statement -> BREAK newline .)


state 75

    (9) statement -> CONTINUE newline .

    CONTINUE        reduce using rule 9 (statement -> CONTINUE newline .)
    BREAK           reduce using rule 9 (statement -> CONTINUE newline .)
    IF              reduce using rule 9 (statement -> CONTINUE newline .)
    WHILE           reduce using rule 9 (statement -> CONTINUE newline .)
    DO              reduce using rule 9 (statement -> CONTINUE newline .)
    RETURN          reduce using rule 9 (statement -> CONTINUE newline .)
    NEWLINE         reduce using rule 9 (statement -> CONTINUE newline .)
    OPENPARAM       reduce using rule 9 (statement -> CONTINUE newline .)
    INCREMENT       reduce using rule 9 (statement -> CONTINUE newline .)
    DECREMENT       reduce using rule 9 (statement -> CONTINUE newline .)
    NOT             reduce using rule 9 (statement -> CONTINUE newline .)
    PLUS            reduce using rule 9 (statement -> CONTINUE newline .)
    MINUS           reduce using rule 9 (statement -> CONTINUE newline .)
    PERCENTAGE      reduce using rule 9 (statement -> CONTINUE newline .)
    ID              reduce using rule 9 (statement -> CONTINUE newline .)
    ARRAY           reduce using rule 9 (statement -> CONTINUE newline .)
    FUNCTION        reduce using rule 9 (statement -> CONTINUE newline .)
    STRUCTURE       reduce using rule 9 (statement -> CONTINUE newline .)
    STRINGLITERAL   reduce using rule 9 (statement -> CONTINUE newline .)
    INTEGERLITERAL  reduce using rule 9 (statement -> CONTINUE newline .)
    CHARLITERAL     reduce using rule 9 (statement -> CONTINUE newline .)
    DECIMALLITERAL  reduce using rule 9 (statement -> CONTINUE newline .)
    TRUE            reduce using rule 9 (statement -> CONTINUE newline .)
    FALSE           reduce using rule 9 (statement -> CONTINUE newline .)
    INTEGER         reduce using rule 9 (statement -> CONTINUE newline .)
    CHAR            reduce using rule 9 (statement -> CONTINUE newline .)
    STRING          reduce using rule 9 (statement -> CONTINUE newline .)
    BOOLEAN         reduce using rule 9 (statement -> CONTINUE newline .)
    DECIMAL         reduce using rule 9 (statement -> CONTINUE newline .)
    $end            reduce using rule 9 (statement -> CONTINUE newline .)
    ELSE            reduce using rule 9 (statement -> CONTINUE newline .)


state 76

    (44) structuredec -> STRUCTURE ID . newline BEGIN newline decs END newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 112

state 77

    (24) decs -> dec newline . decs
    (25) decs -> dec newline .
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    RETURN          reduce using rule 25 (decs -> dec newline .)
    CONTINUE        reduce using rule 25 (decs -> dec newline .)
    BREAK           reduce using rule 25 (decs -> dec newline .)
    IF              reduce using rule 25 (decs -> dec newline .)
    WHILE           reduce using rule 25 (decs -> dec newline .)
    DO              reduce using rule 25 (decs -> dec newline .)
    NEWLINE         reduce using rule 25 (decs -> dec newline .)
    OPENPARAM       reduce using rule 25 (decs -> dec newline .)
    INCREMENT       reduce using rule 25 (decs -> dec newline .)
    DECREMENT       reduce using rule 25 (decs -> dec newline .)
    NOT             reduce using rule 25 (decs -> dec newline .)
    PLUS            reduce using rule 25 (decs -> dec newline .)
    MINUS           reduce using rule 25 (decs -> dec newline .)
    PERCENTAGE      reduce using rule 25 (decs -> dec newline .)
    ID              reduce using rule 25 (decs -> dec newline .)
    STRINGLITERAL   reduce using rule 25 (decs -> dec newline .)
    INTEGERLITERAL  reduce using rule 25 (decs -> dec newline .)
    CHARLITERAL     reduce using rule 25 (decs -> dec newline .)
    DECIMALLITERAL  reduce using rule 25 (decs -> dec newline .)
    TRUE            reduce using rule 25 (decs -> dec newline .)
    FALSE           reduce using rule 25 (decs -> dec newline .)
    $end            reduce using rule 25 (decs -> dec newline .)
    ELSE            reduce using rule 25 (decs -> dec newline .)
    END             reduce using rule 25 (decs -> dec newline .)
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! ARRAY           [ reduce using rule 25 (decs -> dec newline .) ]
  ! FUNCTION        [ reduce using rule 25 (decs -> dec newline .) ]
  ! STRUCTURE       [ reduce using rule 25 (decs -> dec newline .) ]
  ! INTEGER         [ reduce using rule 25 (decs -> dec newline .) ]
  ! CHAR            [ reduce using rule 25 (decs -> dec newline .) ]
  ! STRING          [ reduce using rule 25 (decs -> dec newline .) ]
  ! BOOLEAN         [ reduce using rule 25 (decs -> dec newline .) ]
  ! DECIMAL         [ reduce using rule 25 (decs -> dec newline .) ]

    arraydec                       shift and go to state 11
    dec                            shift and go to state 56
    vardec                         shift and go to state 8
    structuredec                   shift and go to state 49
    functiondec                    shift and go to state 43
    type                           shift and go to state 32
    functiondefn                   shift and go to state 26
    decs                           shift and go to state 113

state 78

    (81) biop -> NOTEQUALS .

    OPENPARAM       reduce using rule 81 (biop -> NOTEQUALS .)
    INCREMENT       reduce using rule 81 (biop -> NOTEQUALS .)
    DECREMENT       reduce using rule 81 (biop -> NOTEQUALS .)
    NOT             reduce using rule 81 (biop -> NOTEQUALS .)
    PLUS            reduce using rule 81 (biop -> NOTEQUALS .)
    MINUS           reduce using rule 81 (biop -> NOTEQUALS .)
    PERCENTAGE      reduce using rule 81 (biop -> NOTEQUALS .)
    ID              reduce using rule 81 (biop -> NOTEQUALS .)
    STRINGLITERAL   reduce using rule 81 (biop -> NOTEQUALS .)
    INTEGERLITERAL  reduce using rule 81 (biop -> NOTEQUALS .)
    CHARLITERAL     reduce using rule 81 (biop -> NOTEQUALS .)
    DECIMALLITERAL  reduce using rule 81 (biop -> NOTEQUALS .)
    TRUE            reduce using rule 81 (biop -> NOTEQUALS .)
    FALSE           reduce using rule 81 (biop -> NOTEQUALS .)


state 79

    (69) biop -> MULTIPLY .

    OPENPARAM       reduce using rule 69 (biop -> MULTIPLY .)
    INCREMENT       reduce using rule 69 (biop -> MULTIPLY .)
    DECREMENT       reduce using rule 69 (biop -> MULTIPLY .)
    NOT             reduce using rule 69 (biop -> MULTIPLY .)
    PLUS            reduce using rule 69 (biop -> MULTIPLY .)
    MINUS           reduce using rule 69 (biop -> MULTIPLY .)
    PERCENTAGE      reduce using rule 69 (biop -> MULTIPLY .)
    ID              reduce using rule 69 (biop -> MULTIPLY .)
    STRINGLITERAL   reduce using rule 69 (biop -> MULTIPLY .)
    INTEGERLITERAL  reduce using rule 69 (biop -> MULTIPLY .)
    CHARLITERAL     reduce using rule 69 (biop -> MULTIPLY .)
    DECIMALLITERAL  reduce using rule 69 (biop -> MULTIPLY .)
    TRUE            reduce using rule 69 (biop -> MULTIPLY .)
    FALSE           reduce using rule 69 (biop -> MULTIPLY .)


state 80

    (73) biop -> MINUS .

    OPENPARAM       reduce using rule 73 (biop -> MINUS .)
    INCREMENT       reduce using rule 73 (biop -> MINUS .)
    DECREMENT       reduce using rule 73 (biop -> MINUS .)
    NOT             reduce using rule 73 (biop -> MINUS .)
    PLUS            reduce using rule 73 (biop -> MINUS .)
    MINUS           reduce using rule 73 (biop -> MINUS .)
    PERCENTAGE      reduce using rule 73 (biop -> MINUS .)
    ID              reduce using rule 73 (biop -> MINUS .)
    STRINGLITERAL   reduce using rule 73 (biop -> MINUS .)
    INTEGERLITERAL  reduce using rule 73 (biop -> MINUS .)
    CHARLITERAL     reduce using rule 73 (biop -> MINUS .)
    DECIMALLITERAL  reduce using rule 73 (biop -> MINUS .)
    TRUE            reduce using rule 73 (biop -> MINUS .)
    FALSE           reduce using rule 73 (biop -> MINUS .)


state 81

    (82) indexaccess -> expression OPENARRAY . expression CLOSEARRAY
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 114

state 82

    (79) biop -> GTE .

    OPENPARAM       reduce using rule 79 (biop -> GTE .)
    INCREMENT       reduce using rule 79 (biop -> GTE .)
    DECREMENT       reduce using rule 79 (biop -> GTE .)
    NOT             reduce using rule 79 (biop -> GTE .)
    PLUS            reduce using rule 79 (biop -> GTE .)
    MINUS           reduce using rule 79 (biop -> GTE .)
    PERCENTAGE      reduce using rule 79 (biop -> GTE .)
    ID              reduce using rule 79 (biop -> GTE .)
    STRINGLITERAL   reduce using rule 79 (biop -> GTE .)
    INTEGERLITERAL  reduce using rule 79 (biop -> GTE .)
    CHARLITERAL     reduce using rule 79 (biop -> GTE .)
    DECIMALLITERAL  reduce using rule 79 (biop -> GTE .)
    TRUE            reduce using rule 79 (biop -> GTE .)
    FALSE           reduce using rule 79 (biop -> GTE .)


state 83

    (60) expression -> expression biop . expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 115

state 84

    (76) biop -> LT .

    OPENPARAM       reduce using rule 76 (biop -> LT .)
    INCREMENT       reduce using rule 76 (biop -> LT .)
    DECREMENT       reduce using rule 76 (biop -> LT .)
    NOT             reduce using rule 76 (biop -> LT .)
    PLUS            reduce using rule 76 (biop -> LT .)
    MINUS           reduce using rule 76 (biop -> LT .)
    PERCENTAGE      reduce using rule 76 (biop -> LT .)
    ID              reduce using rule 76 (biop -> LT .)
    STRINGLITERAL   reduce using rule 76 (biop -> LT .)
    INTEGERLITERAL  reduce using rule 76 (biop -> LT .)
    CHARLITERAL     reduce using rule 76 (biop -> LT .)
    DECIMALLITERAL  reduce using rule 76 (biop -> LT .)
    TRUE            reduce using rule 76 (biop -> LT .)
    FALSE           reduce using rule 76 (biop -> LT .)


state 85

    (72) biop -> PLUS .

    OPENPARAM       reduce using rule 72 (biop -> PLUS .)
    INCREMENT       reduce using rule 72 (biop -> PLUS .)
    DECREMENT       reduce using rule 72 (biop -> PLUS .)
    NOT             reduce using rule 72 (biop -> PLUS .)
    PLUS            reduce using rule 72 (biop -> PLUS .)
    MINUS           reduce using rule 72 (biop -> PLUS .)
    PERCENTAGE      reduce using rule 72 (biop -> PLUS .)
    ID              reduce using rule 72 (biop -> PLUS .)
    STRINGLITERAL   reduce using rule 72 (biop -> PLUS .)
    INTEGERLITERAL  reduce using rule 72 (biop -> PLUS .)
    CHARLITERAL     reduce using rule 72 (biop -> PLUS .)
    DECIMALLITERAL  reduce using rule 72 (biop -> PLUS .)
    TRUE            reduce using rule 72 (biop -> PLUS .)
    FALSE           reduce using rule 72 (biop -> PLUS .)


state 86

    (53) expression -> expression INCREMENT .

    INCREMENT       reduce using rule 53 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 53 (expression -> expression INCREMENT .)
    OPENARRAY       reduce using rule 53 (expression -> expression INCREMENT .)
    OF              reduce using rule 53 (expression -> expression INCREMENT .)
    MULTIPLY        reduce using rule 53 (expression -> expression INCREMENT .)
    DIVIDE          reduce using rule 53 (expression -> expression INCREMENT .)
    MODULO          reduce using rule 53 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 53 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 53 (expression -> expression INCREMENT .)
    AND             reduce using rule 53 (expression -> expression INCREMENT .)
    OR              reduce using rule 53 (expression -> expression INCREMENT .)
    LT              reduce using rule 53 (expression -> expression INCREMENT .)
    GT              reduce using rule 53 (expression -> expression INCREMENT .)
    LTE             reduce using rule 53 (expression -> expression INCREMENT .)
    GTE             reduce using rule 53 (expression -> expression INCREMENT .)
    EQUALCOMPARISON reduce using rule 53 (expression -> expression INCREMENT .)
    NOTEQUALS       reduce using rule 53 (expression -> expression INCREMENT .)
    NEWLINE         reduce using rule 53 (expression -> expression INCREMENT .)
    WHILE           reduce using rule 53 (expression -> expression INCREMENT .)
    CONTINUE        reduce using rule 53 (expression -> expression INCREMENT .)
    BREAK           reduce using rule 53 (expression -> expression INCREMENT .)
    IF              reduce using rule 53 (expression -> expression INCREMENT .)
    DO              reduce using rule 53 (expression -> expression INCREMENT .)
    RETURN          reduce using rule 53 (expression -> expression INCREMENT .)
    OPENPARAM       reduce using rule 53 (expression -> expression INCREMENT .)
    NOT             reduce using rule 53 (expression -> expression INCREMENT .)
    PERCENTAGE      reduce using rule 53 (expression -> expression INCREMENT .)
    ID              reduce using rule 53 (expression -> expression INCREMENT .)
    ARRAY           reduce using rule 53 (expression -> expression INCREMENT .)
    FUNCTION        reduce using rule 53 (expression -> expression INCREMENT .)
    STRUCTURE       reduce using rule 53 (expression -> expression INCREMENT .)
    STRINGLITERAL   reduce using rule 53 (expression -> expression INCREMENT .)
    INTEGERLITERAL  reduce using rule 53 (expression -> expression INCREMENT .)
    CHARLITERAL     reduce using rule 53 (expression -> expression INCREMENT .)
    DECIMALLITERAL  reduce using rule 53 (expression -> expression INCREMENT .)
    TRUE            reduce using rule 53 (expression -> expression INCREMENT .)
    FALSE           reduce using rule 53 (expression -> expression INCREMENT .)
    INTEGER         reduce using rule 53 (expression -> expression INCREMENT .)
    CHAR            reduce using rule 53 (expression -> expression INCREMENT .)
    STRING          reduce using rule 53 (expression -> expression INCREMENT .)
    BOOLEAN         reduce using rule 53 (expression -> expression INCREMENT .)
    DECIMAL         reduce using rule 53 (expression -> expression INCREMENT .)
    $end            reduce using rule 53 (expression -> expression INCREMENT .)
    ELSE            reduce using rule 53 (expression -> expression INCREMENT .)
    CLOSEPARAM      reduce using rule 53 (expression -> expression INCREMENT .)
    CLOSEARRAY      reduce using rule 53 (expression -> expression INCREMENT .)


state 87

    (77) biop -> GT .

    OPENPARAM       reduce using rule 77 (biop -> GT .)
    INCREMENT       reduce using rule 77 (biop -> GT .)
    DECREMENT       reduce using rule 77 (biop -> GT .)
    NOT             reduce using rule 77 (biop -> GT .)
    PLUS            reduce using rule 77 (biop -> GT .)
    MINUS           reduce using rule 77 (biop -> GT .)
    PERCENTAGE      reduce using rule 77 (biop -> GT .)
    ID              reduce using rule 77 (biop -> GT .)
    STRINGLITERAL   reduce using rule 77 (biop -> GT .)
    INTEGERLITERAL  reduce using rule 77 (biop -> GT .)
    CHARLITERAL     reduce using rule 77 (biop -> GT .)
    DECIMALLITERAL  reduce using rule 77 (biop -> GT .)
    TRUE            reduce using rule 77 (biop -> GT .)
    FALSE           reduce using rule 77 (biop -> GT .)


state 88

    (71) biop -> MODULO .

    OPENPARAM       reduce using rule 71 (biop -> MODULO .)
    INCREMENT       reduce using rule 71 (biop -> MODULO .)
    DECREMENT       reduce using rule 71 (biop -> MODULO .)
    NOT             reduce using rule 71 (biop -> MODULO .)
    PLUS            reduce using rule 71 (biop -> MODULO .)
    MINUS           reduce using rule 71 (biop -> MODULO .)
    PERCENTAGE      reduce using rule 71 (biop -> MODULO .)
    ID              reduce using rule 71 (biop -> MODULO .)
    STRINGLITERAL   reduce using rule 71 (biop -> MODULO .)
    INTEGERLITERAL  reduce using rule 71 (biop -> MODULO .)
    CHARLITERAL     reduce using rule 71 (biop -> MODULO .)
    DECIMALLITERAL  reduce using rule 71 (biop -> MODULO .)
    TRUE            reduce using rule 71 (biop -> MODULO .)
    FALSE           reduce using rule 71 (biop -> MODULO .)


state 89

    (70) biop -> DIVIDE .

    OPENPARAM       reduce using rule 70 (biop -> DIVIDE .)
    INCREMENT       reduce using rule 70 (biop -> DIVIDE .)
    DECREMENT       reduce using rule 70 (biop -> DIVIDE .)
    NOT             reduce using rule 70 (biop -> DIVIDE .)
    PLUS            reduce using rule 70 (biop -> DIVIDE .)
    MINUS           reduce using rule 70 (biop -> DIVIDE .)
    PERCENTAGE      reduce using rule 70 (biop -> DIVIDE .)
    ID              reduce using rule 70 (biop -> DIVIDE .)
    STRINGLITERAL   reduce using rule 70 (biop -> DIVIDE .)
    INTEGERLITERAL  reduce using rule 70 (biop -> DIVIDE .)
    CHARLITERAL     reduce using rule 70 (biop -> DIVIDE .)
    DECIMALLITERAL  reduce using rule 70 (biop -> DIVIDE .)
    TRUE            reduce using rule 70 (biop -> DIVIDE .)
    FALSE           reduce using rule 70 (biop -> DIVIDE .)


state 90

    (62) expression -> expression newline .

    INCREMENT       reduce using rule 62 (expression -> expression newline .)
    DECREMENT       reduce using rule 62 (expression -> expression newline .)
    OPENARRAY       reduce using rule 62 (expression -> expression newline .)
    OF              reduce using rule 62 (expression -> expression newline .)
    MULTIPLY        reduce using rule 62 (expression -> expression newline .)
    DIVIDE          reduce using rule 62 (expression -> expression newline .)
    MODULO          reduce using rule 62 (expression -> expression newline .)
    PLUS            reduce using rule 62 (expression -> expression newline .)
    MINUS           reduce using rule 62 (expression -> expression newline .)
    AND             reduce using rule 62 (expression -> expression newline .)
    OR              reduce using rule 62 (expression -> expression newline .)
    LT              reduce using rule 62 (expression -> expression newline .)
    GT              reduce using rule 62 (expression -> expression newline .)
    LTE             reduce using rule 62 (expression -> expression newline .)
    GTE             reduce using rule 62 (expression -> expression newline .)
    EQUALCOMPARISON reduce using rule 62 (expression -> expression newline .)
    NOTEQUALS       reduce using rule 62 (expression -> expression newline .)
    NEWLINE         reduce using rule 62 (expression -> expression newline .)
    WHILE           reduce using rule 62 (expression -> expression newline .)
    CONTINUE        reduce using rule 62 (expression -> expression newline .)
    BREAK           reduce using rule 62 (expression -> expression newline .)
    IF              reduce using rule 62 (expression -> expression newline .)
    DO              reduce using rule 62 (expression -> expression newline .)
    RETURN          reduce using rule 62 (expression -> expression newline .)
    OPENPARAM       reduce using rule 62 (expression -> expression newline .)
    NOT             reduce using rule 62 (expression -> expression newline .)
    PERCENTAGE      reduce using rule 62 (expression -> expression newline .)
    ID              reduce using rule 62 (expression -> expression newline .)
    ARRAY           reduce using rule 62 (expression -> expression newline .)
    FUNCTION        reduce using rule 62 (expression -> expression newline .)
    STRUCTURE       reduce using rule 62 (expression -> expression newline .)
    STRINGLITERAL   reduce using rule 62 (expression -> expression newline .)
    INTEGERLITERAL  reduce using rule 62 (expression -> expression newline .)
    CHARLITERAL     reduce using rule 62 (expression -> expression newline .)
    DECIMALLITERAL  reduce using rule 62 (expression -> expression newline .)
    TRUE            reduce using rule 62 (expression -> expression newline .)
    FALSE           reduce using rule 62 (expression -> expression newline .)
    INTEGER         reduce using rule 62 (expression -> expression newline .)
    CHAR            reduce using rule 62 (expression -> expression newline .)
    STRING          reduce using rule 62 (expression -> expression newline .)
    BOOLEAN         reduce using rule 62 (expression -> expression newline .)
    DECIMAL         reduce using rule 62 (expression -> expression newline .)
    $end            reduce using rule 62 (expression -> expression newline .)
    ELSE            reduce using rule 62 (expression -> expression newline .)
    CLOSEPARAM      reduce using rule 62 (expression -> expression newline .)
    CLOSEARRAY      reduce using rule 62 (expression -> expression newline .)


state 91

    (78) biop -> LTE .

    OPENPARAM       reduce using rule 78 (biop -> LTE .)
    INCREMENT       reduce using rule 78 (biop -> LTE .)
    DECREMENT       reduce using rule 78 (biop -> LTE .)
    NOT             reduce using rule 78 (biop -> LTE .)
    PLUS            reduce using rule 78 (biop -> LTE .)
    MINUS           reduce using rule 78 (biop -> LTE .)
    PERCENTAGE      reduce using rule 78 (biop -> LTE .)
    ID              reduce using rule 78 (biop -> LTE .)
    STRINGLITERAL   reduce using rule 78 (biop -> LTE .)
    INTEGERLITERAL  reduce using rule 78 (biop -> LTE .)
    CHARLITERAL     reduce using rule 78 (biop -> LTE .)
    DECIMALLITERAL  reduce using rule 78 (biop -> LTE .)
    TRUE            reduce using rule 78 (biop -> LTE .)
    FALSE           reduce using rule 78 (biop -> LTE .)


state 92

    (74) biop -> AND .

    OPENPARAM       reduce using rule 74 (biop -> AND .)
    INCREMENT       reduce using rule 74 (biop -> AND .)
    DECREMENT       reduce using rule 74 (biop -> AND .)
    NOT             reduce using rule 74 (biop -> AND .)
    PLUS            reduce using rule 74 (biop -> AND .)
    MINUS           reduce using rule 74 (biop -> AND .)
    PERCENTAGE      reduce using rule 74 (biop -> AND .)
    ID              reduce using rule 74 (biop -> AND .)
    STRINGLITERAL   reduce using rule 74 (biop -> AND .)
    INTEGERLITERAL  reduce using rule 74 (biop -> AND .)
    CHARLITERAL     reduce using rule 74 (biop -> AND .)
    DECIMALLITERAL  reduce using rule 74 (biop -> AND .)
    TRUE            reduce using rule 74 (biop -> AND .)
    FALSE           reduce using rule 74 (biop -> AND .)


state 93

    (83) memberaccess -> expression OF . ID

    ID              shift and go to state 116


state 94

    (80) biop -> EQUALCOMPARISON .

    OPENPARAM       reduce using rule 80 (biop -> EQUALCOMPARISON .)
    INCREMENT       reduce using rule 80 (biop -> EQUALCOMPARISON .)
    DECREMENT       reduce using rule 80 (biop -> EQUALCOMPARISON .)
    NOT             reduce using rule 80 (biop -> EQUALCOMPARISON .)
    PLUS            reduce using rule 80 (biop -> EQUALCOMPARISON .)
    MINUS           reduce using rule 80 (biop -> EQUALCOMPARISON .)
    PERCENTAGE      reduce using rule 80 (biop -> EQUALCOMPARISON .)
    ID              reduce using rule 80 (biop -> EQUALCOMPARISON .)
    STRINGLITERAL   reduce using rule 80 (biop -> EQUALCOMPARISON .)
    INTEGERLITERAL  reduce using rule 80 (biop -> EQUALCOMPARISON .)
    CHARLITERAL     reduce using rule 80 (biop -> EQUALCOMPARISON .)
    DECIMALLITERAL  reduce using rule 80 (biop -> EQUALCOMPARISON .)
    TRUE            reduce using rule 80 (biop -> EQUALCOMPARISON .)
    FALSE           reduce using rule 80 (biop -> EQUALCOMPARISON .)


state 95

    (54) expression -> expression DECREMENT .

    INCREMENT       reduce using rule 54 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 54 (expression -> expression DECREMENT .)
    OPENARRAY       reduce using rule 54 (expression -> expression DECREMENT .)
    OF              reduce using rule 54 (expression -> expression DECREMENT .)
    MULTIPLY        reduce using rule 54 (expression -> expression DECREMENT .)
    DIVIDE          reduce using rule 54 (expression -> expression DECREMENT .)
    MODULO          reduce using rule 54 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 54 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 54 (expression -> expression DECREMENT .)
    AND             reduce using rule 54 (expression -> expression DECREMENT .)
    OR              reduce using rule 54 (expression -> expression DECREMENT .)
    LT              reduce using rule 54 (expression -> expression DECREMENT .)
    GT              reduce using rule 54 (expression -> expression DECREMENT .)
    LTE             reduce using rule 54 (expression -> expression DECREMENT .)
    GTE             reduce using rule 54 (expression -> expression DECREMENT .)
    EQUALCOMPARISON reduce using rule 54 (expression -> expression DECREMENT .)
    NOTEQUALS       reduce using rule 54 (expression -> expression DECREMENT .)
    NEWLINE         reduce using rule 54 (expression -> expression DECREMENT .)
    WHILE           reduce using rule 54 (expression -> expression DECREMENT .)
    CONTINUE        reduce using rule 54 (expression -> expression DECREMENT .)
    BREAK           reduce using rule 54 (expression -> expression DECREMENT .)
    IF              reduce using rule 54 (expression -> expression DECREMENT .)
    DO              reduce using rule 54 (expression -> expression DECREMENT .)
    RETURN          reduce using rule 54 (expression -> expression DECREMENT .)
    OPENPARAM       reduce using rule 54 (expression -> expression DECREMENT .)
    NOT             reduce using rule 54 (expression -> expression DECREMENT .)
    PERCENTAGE      reduce using rule 54 (expression -> expression DECREMENT .)
    ID              reduce using rule 54 (expression -> expression DECREMENT .)
    ARRAY           reduce using rule 54 (expression -> expression DECREMENT .)
    FUNCTION        reduce using rule 54 (expression -> expression DECREMENT .)
    STRUCTURE       reduce using rule 54 (expression -> expression DECREMENT .)
    STRINGLITERAL   reduce using rule 54 (expression -> expression DECREMENT .)
    INTEGERLITERAL  reduce using rule 54 (expression -> expression DECREMENT .)
    CHARLITERAL     reduce using rule 54 (expression -> expression DECREMENT .)
    DECIMALLITERAL  reduce using rule 54 (expression -> expression DECREMENT .)
    TRUE            reduce using rule 54 (expression -> expression DECREMENT .)
    FALSE           reduce using rule 54 (expression -> expression DECREMENT .)
    INTEGER         reduce using rule 54 (expression -> expression DECREMENT .)
    CHAR            reduce using rule 54 (expression -> expression DECREMENT .)
    STRING          reduce using rule 54 (expression -> expression DECREMENT .)
    BOOLEAN         reduce using rule 54 (expression -> expression DECREMENT .)
    DECIMAL         reduce using rule 54 (expression -> expression DECREMENT .)
    $end            reduce using rule 54 (expression -> expression DECREMENT .)
    ELSE            reduce using rule 54 (expression -> expression DECREMENT .)
    CLOSEPARAM      reduce using rule 54 (expression -> expression DECREMENT .)
    CLOSEARRAY      reduce using rule 54 (expression -> expression DECREMENT .)


state 96

    (75) biop -> OR .

    OPENPARAM       reduce using rule 75 (biop -> OR .)
    INCREMENT       reduce using rule 75 (biop -> OR .)
    DECREMENT       reduce using rule 75 (biop -> OR .)
    NOT             reduce using rule 75 (biop -> OR .)
    PLUS            reduce using rule 75 (biop -> OR .)
    MINUS           reduce using rule 75 (biop -> OR .)
    PERCENTAGE      reduce using rule 75 (biop -> OR .)
    ID              reduce using rule 75 (biop -> OR .)
    STRINGLITERAL   reduce using rule 75 (biop -> OR .)
    INTEGERLITERAL  reduce using rule 75 (biop -> OR .)
    CHARLITERAL     reduce using rule 75 (biop -> OR .)
    DECIMALLITERAL  reduce using rule 75 (biop -> OR .)
    TRUE            reduce using rule 75 (biop -> OR .)
    FALSE           reduce using rule 75 (biop -> OR .)


state 97

    (20) dowhilestatement -> DO statement WHILE . OPENPARAM expression CLOSEPARAM newline
    (19) whilestatement -> WHILE . OPENPARAM expression CLOSEPARAM newline statement

    OPENPARAM       shift and go to state 117


state 98

    (21) returnstatement -> RETURN expression newline .
    (62) expression -> expression newline .

  ! reduce/reduce conflict for INCREMENT resolved using rule 21 (returnstatement -> RETURN expression newline .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 21 (returnstatement -> RETURN expression newline .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 21 (returnstatement -> RETURN expression newline .)
  ! reduce/reduce conflict for PLUS resolved using rule 21 (returnstatement -> RETURN expression newline .)
  ! reduce/reduce conflict for MINUS resolved using rule 21 (returnstatement -> RETURN expression newline .)
    END             reduce using rule 21 (returnstatement -> RETURN expression newline .)
    CONTINUE        reduce using rule 21 (returnstatement -> RETURN expression newline .)
    BREAK           reduce using rule 21 (returnstatement -> RETURN expression newline .)
    IF              reduce using rule 21 (returnstatement -> RETURN expression newline .)
    WHILE           reduce using rule 21 (returnstatement -> RETURN expression newline .)
    DO              reduce using rule 21 (returnstatement -> RETURN expression newline .)
    RETURN          reduce using rule 21 (returnstatement -> RETURN expression newline .)
    NEWLINE         reduce using rule 21 (returnstatement -> RETURN expression newline .)
    OPENPARAM       reduce using rule 21 (returnstatement -> RETURN expression newline .)
    INCREMENT       reduce using rule 21 (returnstatement -> RETURN expression newline .)
    DECREMENT       reduce using rule 21 (returnstatement -> RETURN expression newline .)
    NOT             reduce using rule 21 (returnstatement -> RETURN expression newline .)
    PLUS            reduce using rule 21 (returnstatement -> RETURN expression newline .)
    MINUS           reduce using rule 21 (returnstatement -> RETURN expression newline .)
    PERCENTAGE      reduce using rule 21 (returnstatement -> RETURN expression newline .)
    ID              reduce using rule 21 (returnstatement -> RETURN expression newline .)
    ARRAY           reduce using rule 21 (returnstatement -> RETURN expression newline .)
    FUNCTION        reduce using rule 21 (returnstatement -> RETURN expression newline .)
    STRUCTURE       reduce using rule 21 (returnstatement -> RETURN expression newline .)
    STRINGLITERAL   reduce using rule 21 (returnstatement -> RETURN expression newline .)
    INTEGERLITERAL  reduce using rule 21 (returnstatement -> RETURN expression newline .)
    CHARLITERAL     reduce using rule 21 (returnstatement -> RETURN expression newline .)
    DECIMALLITERAL  reduce using rule 21 (returnstatement -> RETURN expression newline .)
    TRUE            reduce using rule 21 (returnstatement -> RETURN expression newline .)
    FALSE           reduce using rule 21 (returnstatement -> RETURN expression newline .)
    INTEGER         reduce using rule 21 (returnstatement -> RETURN expression newline .)
    CHAR            reduce using rule 21 (returnstatement -> RETURN expression newline .)
    STRING          reduce using rule 21 (returnstatement -> RETURN expression newline .)
    BOOLEAN         reduce using rule 21 (returnstatement -> RETURN expression newline .)
    DECIMAL         reduce using rule 21 (returnstatement -> RETURN expression newline .)
    $end            reduce using rule 21 (returnstatement -> RETURN expression newline .)
    ELSE            reduce using rule 21 (returnstatement -> RETURN expression newline .)
    OPENARRAY       reduce using rule 62 (expression -> expression newline .)
    OF              reduce using rule 62 (expression -> expression newline .)
    MULTIPLY        reduce using rule 62 (expression -> expression newline .)
    DIVIDE          reduce using rule 62 (expression -> expression newline .)
    MODULO          reduce using rule 62 (expression -> expression newline .)
    AND             reduce using rule 62 (expression -> expression newline .)
    OR              reduce using rule 62 (expression -> expression newline .)
    LT              reduce using rule 62 (expression -> expression newline .)
    GT              reduce using rule 62 (expression -> expression newline .)
    LTE             reduce using rule 62 (expression -> expression newline .)
    GTE             reduce using rule 62 (expression -> expression newline .)
    EQUALCOMPARISON reduce using rule 62 (expression -> expression newline .)
    NOTEQUALS       reduce using rule 62 (expression -> expression newline .)

  ! INCREMENT       [ reduce using rule 62 (expression -> expression newline .) ]
  ! DECREMENT       [ reduce using rule 62 (expression -> expression newline .) ]
  ! NEWLINE         [ reduce using rule 62 (expression -> expression newline .) ]
  ! PLUS            [ reduce using rule 62 (expression -> expression newline .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression newline .) ]


state 99

    (59) expression -> OPENPARAM expression CLOSEPARAM .

    INCREMENT       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    DECREMENT       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    OPENARRAY       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    OF              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    MULTIPLY        reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    DIVIDE          reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    MODULO          reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    PLUS            reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    MINUS           reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    AND             reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    OR              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    LT              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    GT              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    LTE             reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    GTE             reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    EQUALCOMPARISON reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    NOTEQUALS       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    NEWLINE         reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    WHILE           reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    CONTINUE        reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    BREAK           reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    IF              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    DO              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    RETURN          reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    OPENPARAM       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    NOT             reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    PERCENTAGE      reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    ID              reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    ARRAY           reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    FUNCTION        reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    STRUCTURE       reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    STRINGLITERAL   reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    INTEGERLITERAL  reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    CHARLITERAL     reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    DECIMALLITERAL  reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    TRUE            reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    FALSE           reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    INTEGER         reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    CHAR            reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    STRING          reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    BOOLEAN         reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    DECIMAL         reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    $end            reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    ELSE            reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    CLOSEPARAM      reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)
    CLOSEARRAY      reduce using rule 59 (expression -> OPENPARAM expression CLOSEPARAM .)


state 100

    (36) arraydec -> ARRAY type ID . newline
    (37) arraydec -> ARRAY type ID . EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    EQUALS          shift and go to state 119
    NEWLINE         shift and go to state 4

    newline                        shift and go to state 118

state 101

    (19) whilestatement -> WHILE OPENPARAM expression . CLOSEPARAM newline statement
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    CLOSEPARAM      shift and go to state 120
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 102

    (32) iddec -> ID newline .

    NEWLINE         reduce using rule 32 (iddec -> ID newline .)


state 103

    (34) iddec -> ID EQUALS . literal newline
    (35) iddec -> ID EQUALS . literal COMMA iddec
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literal                        shift and go to state 121

state 104

    (33) iddec -> ID COMMA . iddec
    (32) iddec -> . ID newline
    (33) iddec -> . ID COMMA iddec
    (34) iddec -> . ID EQUALS literal newline
    (35) iddec -> . ID EQUALS literal COMMA iddec

    ID              shift and go to state 68

    iddec                          shift and go to state 122

state 105

    (38) functiondec -> FUNCTION ID OPENPARAM . paramlist CLOSEPARAM
    (39) functiondec -> FUNCTION ID OPENPARAM . paramlist CLOSEPARAM newline
    (40) paramlist -> . type ID
    (41) paramlist -> . type ID COMMA paramlist
    (42) paramlist -> . empty
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL
    (96) empty -> .

    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38
    CLOSEPARAM      reduce using rule 96 (empty -> .)

    type                           shift and go to state 124
    empty                          shift and go to state 125
    paramlist                      shift and go to state 123

state 106

    (43) functiondefn -> functiondec newline BEGIN . block returnstatement END newline
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 126
    ifstatement                    shift and go to state 59

state 107

    (84) functioncall -> ID OPENPARAM callarguments . CLOSEPARAM

    CLOSEPARAM      shift and go to state 127


state 108

    (51) literalslist -> literal .
    (52) literalslist -> literal . COMMA literalslist

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSEPARAM      reduce using rule 51 (literalslist -> literal .)
    CLOSEARRAY      reduce using rule 51 (literalslist -> literal .)
    COMMA           shift and go to state 128

  ! COMMA           [ reduce using rule 51 (literalslist -> literal .) ]


state 109

    (86) callarguments -> literalslist .
    (88) callarguments -> literalslist . COMMA callarguments

    CLOSEPARAM      reduce using rule 86 (callarguments -> literalslist .)
    COMMA           shift and go to state 129


state 110

    (85) callarguments -> ID .
    (87) callarguments -> ID . COMMA callarguments

    CLOSEPARAM      reduce using rule 85 (callarguments -> ID .)
    COMMA           shift and go to state 130


state 111

    (17) ifstatement -> IF OPENPARAM expression . CLOSEPARAM statement
    (18) ifstatement -> IF OPENPARAM expression . CLOSEPARAM statement ELSE statement
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    CLOSEPARAM      shift and go to state 131
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 112

    (44) structuredec -> STRUCTURE ID newline . BEGIN newline decs END newline

    BEGIN           shift and go to state 132


state 113

    (24) decs -> dec newline decs .

    RETURN          reduce using rule 24 (decs -> dec newline decs .)
    CONTINUE        reduce using rule 24 (decs -> dec newline decs .)
    BREAK           reduce using rule 24 (decs -> dec newline decs .)
    IF              reduce using rule 24 (decs -> dec newline decs .)
    WHILE           reduce using rule 24 (decs -> dec newline decs .)
    DO              reduce using rule 24 (decs -> dec newline decs .)
    NEWLINE         reduce using rule 24 (decs -> dec newline decs .)
    OPENPARAM       reduce using rule 24 (decs -> dec newline decs .)
    INCREMENT       reduce using rule 24 (decs -> dec newline decs .)
    DECREMENT       reduce using rule 24 (decs -> dec newline decs .)
    NOT             reduce using rule 24 (decs -> dec newline decs .)
    PLUS            reduce using rule 24 (decs -> dec newline decs .)
    MINUS           reduce using rule 24 (decs -> dec newline decs .)
    PERCENTAGE      reduce using rule 24 (decs -> dec newline decs .)
    ID              reduce using rule 24 (decs -> dec newline decs .)
    ARRAY           reduce using rule 24 (decs -> dec newline decs .)
    FUNCTION        reduce using rule 24 (decs -> dec newline decs .)
    STRUCTURE       reduce using rule 24 (decs -> dec newline decs .)
    STRINGLITERAL   reduce using rule 24 (decs -> dec newline decs .)
    INTEGERLITERAL  reduce using rule 24 (decs -> dec newline decs .)
    CHARLITERAL     reduce using rule 24 (decs -> dec newline decs .)
    DECIMALLITERAL  reduce using rule 24 (decs -> dec newline decs .)
    TRUE            reduce using rule 24 (decs -> dec newline decs .)
    FALSE           reduce using rule 24 (decs -> dec newline decs .)
    INTEGER         reduce using rule 24 (decs -> dec newline decs .)
    CHAR            reduce using rule 24 (decs -> dec newline decs .)
    STRING          reduce using rule 24 (decs -> dec newline decs .)
    BOOLEAN         reduce using rule 24 (decs -> dec newline decs .)
    DECIMAL         reduce using rule 24 (decs -> dec newline decs .)
    $end            reduce using rule 24 (decs -> dec newline decs .)
    ELSE            reduce using rule 24 (decs -> dec newline decs .)
    END             reduce using rule 24 (decs -> dec newline decs .)


state 114

    (82) indexaccess -> expression OPENARRAY expression . CLOSEARRAY
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    CLOSEARRAY      shift and go to state 133
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 115

    (60) expression -> expression biop expression .
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for OPENARRAY resolved as shift
  ! shift/reduce conflict for OF resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALCOMPARISON resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    WHILE           reduce using rule 60 (expression -> expression biop expression .)
    CONTINUE        reduce using rule 60 (expression -> expression biop expression .)
    BREAK           reduce using rule 60 (expression -> expression biop expression .)
    IF              reduce using rule 60 (expression -> expression biop expression .)
    DO              reduce using rule 60 (expression -> expression biop expression .)
    RETURN          reduce using rule 60 (expression -> expression biop expression .)
    OPENPARAM       reduce using rule 60 (expression -> expression biop expression .)
    NOT             reduce using rule 60 (expression -> expression biop expression .)
    PERCENTAGE      reduce using rule 60 (expression -> expression biop expression .)
    ID              reduce using rule 60 (expression -> expression biop expression .)
    ARRAY           reduce using rule 60 (expression -> expression biop expression .)
    FUNCTION        reduce using rule 60 (expression -> expression biop expression .)
    STRUCTURE       reduce using rule 60 (expression -> expression biop expression .)
    STRINGLITERAL   reduce using rule 60 (expression -> expression biop expression .)
    INTEGERLITERAL  reduce using rule 60 (expression -> expression biop expression .)
    CHARLITERAL     reduce using rule 60 (expression -> expression biop expression .)
    DECIMALLITERAL  reduce using rule 60 (expression -> expression biop expression .)
    TRUE            reduce using rule 60 (expression -> expression biop expression .)
    FALSE           reduce using rule 60 (expression -> expression biop expression .)
    INTEGER         reduce using rule 60 (expression -> expression biop expression .)
    CHAR            reduce using rule 60 (expression -> expression biop expression .)
    STRING          reduce using rule 60 (expression -> expression biop expression .)
    BOOLEAN         reduce using rule 60 (expression -> expression biop expression .)
    DECIMAL         reduce using rule 60 (expression -> expression biop expression .)
    $end            reduce using rule 60 (expression -> expression biop expression .)
    ELSE            reduce using rule 60 (expression -> expression biop expression .)
    CLOSEPARAM      reduce using rule 60 (expression -> expression biop expression .)
    CLOSEARRAY      reduce using rule 60 (expression -> expression biop expression .)
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

  ! INCREMENT       [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! DECREMENT       [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! OPENARRAY       [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! OF              [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! MODULO          [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! PLUS            [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! LTE             [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! GTE             [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! EQUALCOMPARISON [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! NOTEQUALS       [ reduce using rule 60 (expression -> expression biop expression .) ]
  ! NEWLINE         [ reduce using rule 60 (expression -> expression biop expression .) ]

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 116

    (83) memberaccess -> expression OF ID .

    CLOSEPARAM      reduce using rule 83 (memberaccess -> expression OF ID .)
    INCREMENT       reduce using rule 83 (memberaccess -> expression OF ID .)
    DECREMENT       reduce using rule 83 (memberaccess -> expression OF ID .)
    OPENARRAY       reduce using rule 83 (memberaccess -> expression OF ID .)
    OF              reduce using rule 83 (memberaccess -> expression OF ID .)
    MULTIPLY        reduce using rule 83 (memberaccess -> expression OF ID .)
    DIVIDE          reduce using rule 83 (memberaccess -> expression OF ID .)
    MODULO          reduce using rule 83 (memberaccess -> expression OF ID .)
    PLUS            reduce using rule 83 (memberaccess -> expression OF ID .)
    MINUS           reduce using rule 83 (memberaccess -> expression OF ID .)
    AND             reduce using rule 83 (memberaccess -> expression OF ID .)
    OR              reduce using rule 83 (memberaccess -> expression OF ID .)
    LT              reduce using rule 83 (memberaccess -> expression OF ID .)
    GT              reduce using rule 83 (memberaccess -> expression OF ID .)
    LTE             reduce using rule 83 (memberaccess -> expression OF ID .)
    GTE             reduce using rule 83 (memberaccess -> expression OF ID .)
    EQUALCOMPARISON reduce using rule 83 (memberaccess -> expression OF ID .)
    NOTEQUALS       reduce using rule 83 (memberaccess -> expression OF ID .)
    NEWLINE         reduce using rule 83 (memberaccess -> expression OF ID .)
    CONTINUE        reduce using rule 83 (memberaccess -> expression OF ID .)
    BREAK           reduce using rule 83 (memberaccess -> expression OF ID .)
    IF              reduce using rule 83 (memberaccess -> expression OF ID .)
    WHILE           reduce using rule 83 (memberaccess -> expression OF ID .)
    DO              reduce using rule 83 (memberaccess -> expression OF ID .)
    RETURN          reduce using rule 83 (memberaccess -> expression OF ID .)
    OPENPARAM       reduce using rule 83 (memberaccess -> expression OF ID .)
    NOT             reduce using rule 83 (memberaccess -> expression OF ID .)
    PERCENTAGE      reduce using rule 83 (memberaccess -> expression OF ID .)
    ID              reduce using rule 83 (memberaccess -> expression OF ID .)
    ARRAY           reduce using rule 83 (memberaccess -> expression OF ID .)
    FUNCTION        reduce using rule 83 (memberaccess -> expression OF ID .)
    STRUCTURE       reduce using rule 83 (memberaccess -> expression OF ID .)
    STRINGLITERAL   reduce using rule 83 (memberaccess -> expression OF ID .)
    INTEGERLITERAL  reduce using rule 83 (memberaccess -> expression OF ID .)
    CHARLITERAL     reduce using rule 83 (memberaccess -> expression OF ID .)
    DECIMALLITERAL  reduce using rule 83 (memberaccess -> expression OF ID .)
    TRUE            reduce using rule 83 (memberaccess -> expression OF ID .)
    FALSE           reduce using rule 83 (memberaccess -> expression OF ID .)
    INTEGER         reduce using rule 83 (memberaccess -> expression OF ID .)
    CHAR            reduce using rule 83 (memberaccess -> expression OF ID .)
    STRING          reduce using rule 83 (memberaccess -> expression OF ID .)
    BOOLEAN         reduce using rule 83 (memberaccess -> expression OF ID .)
    DECIMAL         reduce using rule 83 (memberaccess -> expression OF ID .)
    $end            reduce using rule 83 (memberaccess -> expression OF ID .)
    ELSE            reduce using rule 83 (memberaccess -> expression OF ID .)
    CLOSEARRAY      reduce using rule 83 (memberaccess -> expression OF ID .)


state 117

    (20) dowhilestatement -> DO statement WHILE OPENPARAM . expression CLOSEPARAM newline
    (19) whilestatement -> WHILE OPENPARAM . expression CLOSEPARAM newline statement
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    primaryexpression              shift and go to state 10
    unaryop                        shift and go to state 36
    literal                        shift and go to state 25
    memberaccess                   shift and go to state 16
    functioncall                   shift and go to state 52
    indexaccess                    shift and go to state 42
    expression                     shift and go to state 134

state 118

    (36) arraydec -> ARRAY type ID newline .

    NEWLINE         reduce using rule 36 (arraydec -> ARRAY type ID newline .)


state 119

    (37) arraydec -> ARRAY type ID EQUALS . OPENARRAY literalslist CLOSEARRAY newline

    OPENARRAY       shift and go to state 135


state 120

    (19) whilestatement -> WHILE OPENPARAM expression CLOSEPARAM . newline statement
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 136

state 121

    (34) iddec -> ID EQUALS literal . newline
    (35) iddec -> ID EQUALS literal . COMMA iddec
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    COMMA           shift and go to state 138
    NEWLINE         shift and go to state 4

    newline                        shift and go to state 137

state 122

    (33) iddec -> ID COMMA iddec .

    NEWLINE         reduce using rule 33 (iddec -> ID COMMA iddec .)


state 123

    (38) functiondec -> FUNCTION ID OPENPARAM paramlist . CLOSEPARAM
    (39) functiondec -> FUNCTION ID OPENPARAM paramlist . CLOSEPARAM newline

    CLOSEPARAM      shift and go to state 139


state 124

    (40) paramlist -> type . ID
    (41) paramlist -> type . ID COMMA paramlist

    ID              shift and go to state 140


state 125

    (42) paramlist -> empty .

    CLOSEPARAM      reduce using rule 42 (paramlist -> empty .)


state 126

    (43) functiondefn -> functiondec newline BEGIN block . returnstatement END newline
    (5) statement -> block .
    (21) returnstatement -> . RETURN expression newline

  ! shift/reduce conflict for RETURN resolved as shift
    CONTINUE        reduce using rule 5 (statement -> block .)
    BREAK           reduce using rule 5 (statement -> block .)
    IF              reduce using rule 5 (statement -> block .)
    WHILE           reduce using rule 5 (statement -> block .)
    DO              reduce using rule 5 (statement -> block .)
    NEWLINE         reduce using rule 5 (statement -> block .)
    OPENPARAM       reduce using rule 5 (statement -> block .)
    INCREMENT       reduce using rule 5 (statement -> block .)
    DECREMENT       reduce using rule 5 (statement -> block .)
    NOT             reduce using rule 5 (statement -> block .)
    PLUS            reduce using rule 5 (statement -> block .)
    MINUS           reduce using rule 5 (statement -> block .)
    PERCENTAGE      reduce using rule 5 (statement -> block .)
    ID              reduce using rule 5 (statement -> block .)
    ARRAY           reduce using rule 5 (statement -> block .)
    FUNCTION        reduce using rule 5 (statement -> block .)
    STRUCTURE       reduce using rule 5 (statement -> block .)
    STRINGLITERAL   reduce using rule 5 (statement -> block .)
    INTEGERLITERAL  reduce using rule 5 (statement -> block .)
    CHARLITERAL     reduce using rule 5 (statement -> block .)
    DECIMALLITERAL  reduce using rule 5 (statement -> block .)
    TRUE            reduce using rule 5 (statement -> block .)
    FALSE           reduce using rule 5 (statement -> block .)
    INTEGER         reduce using rule 5 (statement -> block .)
    CHAR            reduce using rule 5 (statement -> block .)
    STRING          reduce using rule 5 (statement -> block .)
    BOOLEAN         reduce using rule 5 (statement -> block .)
    DECIMAL         reduce using rule 5 (statement -> block .)
    RETURN          shift and go to state 9

  ! RETURN          [ reduce using rule 5 (statement -> block .) ]

    returnstatement                shift and go to state 141

state 127

    (84) functioncall -> ID OPENPARAM callarguments CLOSEPARAM .

    INCREMENT       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    DECREMENT       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    OPENARRAY       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    OF              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    MULTIPLY        reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    DIVIDE          reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    MODULO          reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    PLUS            reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    MINUS           reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    AND             reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    OR              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    LT              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    GT              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    LTE             reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    GTE             reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    EQUALCOMPARISON reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    NOTEQUALS       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    NEWLINE         reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    CONTINUE        reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    BREAK           reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    IF              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    WHILE           reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    DO              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    RETURN          reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    OPENPARAM       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    NOT             reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    PERCENTAGE      reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    ID              reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    ARRAY           reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    FUNCTION        reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    STRUCTURE       reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    STRINGLITERAL   reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    INTEGERLITERAL  reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    CHARLITERAL     reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    DECIMALLITERAL  reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    TRUE            reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    FALSE           reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    INTEGER         reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    CHAR            reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    STRING          reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    BOOLEAN         reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    DECIMAL         reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    $end            reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    ELSE            reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    CLOSEARRAY      reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)
    CLOSEPARAM      reduce using rule 84 (functioncall -> ID OPENPARAM callarguments CLOSEPARAM .)


state 128

    (52) literalslist -> literal COMMA . literalslist
    (51) literalslist -> . literal
    (52) literalslist -> . literal COMMA literalslist
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literalslist                   shift and go to state 142
    literal                        shift and go to state 108

state 129

    (88) callarguments -> literalslist COMMA . callarguments
    (85) callarguments -> . ID
    (86) callarguments -> . literalslist
    (87) callarguments -> . ID COMMA callarguments
    (88) callarguments -> . literalslist COMMA callarguments
    (51) literalslist -> . literal
    (52) literalslist -> . literal COMMA literalslist
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    ID              shift and go to state 110
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literalslist                   shift and go to state 109
    callarguments                  shift and go to state 143
    literal                        shift and go to state 108

state 130

    (87) callarguments -> ID COMMA . callarguments
    (85) callarguments -> . ID
    (86) callarguments -> . literalslist
    (87) callarguments -> . ID COMMA callarguments
    (88) callarguments -> . literalslist COMMA callarguments
    (51) literalslist -> . literal
    (52) literalslist -> . literal COMMA literalslist
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    ID              shift and go to state 110
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literalslist                   shift and go to state 109
    callarguments                  shift and go to state 144
    literal                        shift and go to state 108

state 131

    (17) ifstatement -> IF OPENPARAM expression CLOSEPARAM . statement
    (18) ifstatement -> IF OPENPARAM expression CLOSEPARAM . statement ELSE statement
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    $end            reduce using rule 96 (empty -> .)
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 145
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 132

    (44) structuredec -> STRUCTURE ID newline BEGIN . newline decs END newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 146

state 133

    (82) indexaccess -> expression OPENARRAY expression CLOSEARRAY .

    INCREMENT       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    DECREMENT       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    OPENARRAY       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    OF              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    MULTIPLY        reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    DIVIDE          reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    MODULO          reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    PLUS            reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    MINUS           reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    AND             reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    OR              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    LT              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    GT              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    LTE             reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    GTE             reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    EQUALCOMPARISON reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    NOTEQUALS       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    NEWLINE         reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    CONTINUE        reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    BREAK           reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    IF              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    WHILE           reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    DO              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    RETURN          reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    OPENPARAM       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    NOT             reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    PERCENTAGE      reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    ID              reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    ARRAY           reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    FUNCTION        reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    STRUCTURE       reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    STRINGLITERAL   reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    INTEGERLITERAL  reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    CHARLITERAL     reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    DECIMALLITERAL  reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    TRUE            reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    FALSE           reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    INTEGER         reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    CHAR            reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    STRING          reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    BOOLEAN         reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    DECIMAL         reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    $end            reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    ELSE            reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    CLOSEPARAM      reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)
    CLOSEARRAY      reduce using rule 82 (indexaccess -> expression OPENARRAY expression CLOSEARRAY .)


state 134

    (20) dowhilestatement -> DO statement WHILE OPENPARAM expression . CLOSEPARAM newline
    (19) whilestatement -> WHILE OPENPARAM expression . CLOSEPARAM newline statement
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (60) expression -> expression . biop expression
    (62) expression -> expression . newline
    (82) indexaccess -> expression . OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> expression . OF ID
    (69) biop -> . MULTIPLY
    (70) biop -> . DIVIDE
    (71) biop -> . MODULO
    (72) biop -> . PLUS
    (73) biop -> . MINUS
    (74) biop -> . AND
    (75) biop -> . OR
    (76) biop -> . LT
    (77) biop -> . GT
    (78) biop -> . LTE
    (79) biop -> . GTE
    (80) biop -> . EQUALCOMPARISON
    (81) biop -> . NOTEQUALS
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    CLOSEPARAM      shift and go to state 147
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 95
    OPENARRAY       shift and go to state 81
    OF              shift and go to state 93
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 80
    AND             shift and go to state 92
    OR              shift and go to state 96
    LT              shift and go to state 84
    GT              shift and go to state 87
    LTE             shift and go to state 91
    GTE             shift and go to state 82
    EQUALCOMPARISON shift and go to state 94
    NOTEQUALS       shift and go to state 78
    NEWLINE         shift and go to state 4

    biop                           shift and go to state 83
    newline                        shift and go to state 90

state 135

    (37) arraydec -> ARRAY type ID EQUALS OPENARRAY . literalslist CLOSEARRAY newline
    (51) literalslist -> . literal
    (52) literalslist -> . literal COMMA literalslist
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE

    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47

    literalslist                   shift and go to state 148
    literal                        shift and go to state 108

state 136

    (19) whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline . statement
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    $end            reduce using rule 96 (empty -> .)
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 149
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 137

    (34) iddec -> ID EQUALS literal newline .

    NEWLINE         reduce using rule 34 (iddec -> ID EQUALS literal newline .)


state 138

    (35) iddec -> ID EQUALS literal COMMA . iddec
    (32) iddec -> . ID newline
    (33) iddec -> . ID COMMA iddec
    (34) iddec -> . ID EQUALS literal newline
    (35) iddec -> . ID EQUALS literal COMMA iddec

    ID              shift and go to state 68

    iddec                          shift and go to state 150

state 139

    (38) functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM .
    (39) functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 38 (functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM .) ]

    newline                        shift and go to state 151

state 140

    (40) paramlist -> type ID .
    (41) paramlist -> type ID . COMMA paramlist

    CLOSEPARAM      reduce using rule 40 (paramlist -> type ID .)
    COMMA           shift and go to state 152


state 141

    (43) functiondefn -> functiondec newline BEGIN block returnstatement . END newline

    END             shift and go to state 153


state 142

    (52) literalslist -> literal COMMA literalslist .

    COMMA           reduce using rule 52 (literalslist -> literal COMMA literalslist .)
    CLOSEPARAM      reduce using rule 52 (literalslist -> literal COMMA literalslist .)
    CLOSEARRAY      reduce using rule 52 (literalslist -> literal COMMA literalslist .)


state 143

    (88) callarguments -> literalslist COMMA callarguments .

    CLOSEPARAM      reduce using rule 88 (callarguments -> literalslist COMMA callarguments .)


state 144

    (87) callarguments -> ID COMMA callarguments .

    CLOSEPARAM      reduce using rule 87 (callarguments -> ID COMMA callarguments .)


state 145

    (17) ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .
    (18) ifstatement -> IF OPENPARAM expression CLOSEPARAM statement . ELSE statement
    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DO resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    ELSE            shift and go to state 154
    $end            reduce using rule 15 (block -> statement .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! BREAK           [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! IF              [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! WHILE           [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! DO              [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! RETURN          [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! NEWLINE         [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! OPENPARAM       [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! INCREMENT       [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! DECREMENT       [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! NOT             [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! PLUS            [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! MINUS           [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! PERCENTAGE      [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! ID              [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! ARRAY           [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! FUNCTION        [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! STRUCTURE       [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! STRINGLITERAL   [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! CHARLITERAL     [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! TRUE            [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! FALSE           [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! INTEGER         [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! CHAR            [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! STRING          [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! BOOLEAN         [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! DECIMAL         [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! $end            [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! ELSE            [ reduce using rule 17 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement .) ]
  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! ELSE            [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]
  ! $end            [ reduce using rule 96 (empty -> .) ]
  ! ELSE            [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 146

    (44) structuredec -> STRUCTURE ID newline BEGIN newline . decs END newline
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

    arraydec                       shift and go to state 11
    dec                            shift and go to state 56
    functiondefn                   shift and go to state 26
    structuredec                   shift and go to state 49
    functiondec                    shift and go to state 43
    type                           shift and go to state 32
    vardec                         shift and go to state 8
    decs                           shift and go to state 155

state 147

    (20) dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM . newline
    (19) whilestatement -> WHILE OPENPARAM expression CLOSEPARAM . newline statement
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 156

state 148

    (37) arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist . CLOSEARRAY newline

    CLOSEARRAY      shift and go to state 157


state 149

    (19) whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .
    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DO resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    $end            reduce using rule 15 (block -> statement .)
    ELSE            reduce using rule 15 (block -> statement .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! BREAK           [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! IF              [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! WHILE           [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! DO              [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! RETURN          [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! NEWLINE         [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! OPENPARAM       [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! INCREMENT       [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! DECREMENT       [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! NOT             [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! PLUS            [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! MINUS           [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! PERCENTAGE      [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! ID              [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! ARRAY           [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! FUNCTION        [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! STRUCTURE       [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! STRINGLITERAL   [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! CHARLITERAL     [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! TRUE            [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! FALSE           [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! INTEGER         [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! CHAR            [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! STRING          [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! BOOLEAN         [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! DECIMAL         [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! $end            [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! ELSE            [ reduce using rule 19 (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement .) ]
  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]
  ! $end            [ reduce using rule 96 (empty -> .) ]
  ! ELSE            [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 150

    (35) iddec -> ID EQUALS literal COMMA iddec .

    NEWLINE         reduce using rule 35 (iddec -> ID EQUALS literal COMMA iddec .)


state 151

    (39) functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline .

    NEWLINE         reduce using rule 39 (functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline .)


state 152

    (41) paramlist -> type ID COMMA . paramlist
    (40) paramlist -> . type ID
    (41) paramlist -> . type ID COMMA paramlist
    (42) paramlist -> . empty
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL
    (96) empty -> .

    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38
    CLOSEPARAM      reduce using rule 96 (empty -> .)

    type                           shift and go to state 124
    empty                          shift and go to state 125
    paramlist                      shift and go to state 158

state 153

    (43) functiondefn -> functiondec newline BEGIN block returnstatement END . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 159

state 154

    (18) ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE . statement
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    $end            reduce using rule 96 (empty -> .)
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 160
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 155

    (44) structuredec -> STRUCTURE ID newline BEGIN newline decs . END newline

    END             shift and go to state 161


state 156

    (20) dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .
    (19) whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline . statement
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (15) block -> . statement
    (16) block -> . statement block
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for NOT resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for PLUS resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for MINUS resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for ID resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for ARRAY resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for TRUE resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for FALSE resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for INTEGER resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for CHAR resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for STRING resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    $end            reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
    ELSE            reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! BREAK           [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! IF              [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! WHILE           [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! DO              [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! RETURN          [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! NEWLINE         [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! OPENPARAM       [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! INCREMENT       [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! DECREMENT       [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! NOT             [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! PLUS            [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! MINUS           [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! PERCENTAGE      [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! ID              [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! ARRAY           [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! FUNCTION        [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! STRUCTURE       [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! STRINGLITERAL   [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! INTEGERLITERAL  [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! CHARLITERAL     [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! DECIMALLITERAL  [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! TRUE            [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! FALSE           [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! INTEGER         [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! CHAR            [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! STRING          [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! BOOLEAN         [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! DECIMAL         [ reduce using rule 20 (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 149
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 58
    ifstatement                    shift and go to state 59

state 157

    (37) arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 162

state 158

    (41) paramlist -> type ID COMMA paramlist .

    CLOSEPARAM      reduce using rule 41 (paramlist -> type ID COMMA paramlist .)


state 159

    (43) functiondefn -> functiondec newline BEGIN block returnstatement END newline .

    NEWLINE         reduce using rule 43 (functiondefn -> functiondec newline BEGIN block returnstatement END newline .)


state 160

    (18) ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .
    (15) block -> statement .
    (16) block -> statement . block
    (15) block -> . statement
    (16) block -> . statement block
    (5) statement -> . block
    (6) statement -> . ifstatement
    (7) statement -> . whilestatement
    (8) statement -> . dowhilestatement
    (9) statement -> . CONTINUE newline
    (10) statement -> . BREAK newline
    (11) statement -> . returnstatement
    (12) statement -> . simplestatement
    (13) statement -> . empty
    (14) statement -> . newline
    (17) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement
    (18) ifstatement -> . IF OPENPARAM expression CLOSEPARAM statement ELSE statement
    (19) whilestatement -> . WHILE OPENPARAM expression CLOSEPARAM newline statement
    (20) dowhilestatement -> . DO statement WHILE OPENPARAM expression CLOSEPARAM newline
    (21) returnstatement -> . RETURN expression newline
    (22) simplestatement -> . decs
    (23) simplestatement -> . expression
    (96) empty -> .
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE
    (24) decs -> . dec newline decs
    (25) decs -> . dec newline
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . unaryop expression
    (56) expression -> . indexaccess
    (57) expression -> . memberaccess
    (58) expression -> . functioncall
    (59) expression -> . OPENPARAM expression CLOSEPARAM
    (60) expression -> . expression biop expression
    (61) expression -> . primaryexpression
    (62) expression -> . expression newline
    (26) dec -> . vardec
    (27) dec -> . arraydec
    (28) dec -> . functiondec
    (29) dec -> . functiondefn
    (30) dec -> . structuredec
    (63) unaryop -> . INCREMENT
    (64) unaryop -> . DECREMENT
    (65) unaryop -> . NOT
    (66) unaryop -> . PLUS
    (67) unaryop -> . MINUS
    (68) unaryop -> . PERCENTAGE
    (82) indexaccess -> . expression OPENARRAY expression CLOSEARRAY
    (83) memberaccess -> . expression OF ID
    (84) functioncall -> . ID OPENPARAM callarguments CLOSEPARAM
    (89) primaryexpression -> . literal
    (90) primaryexpression -> . ID
    (31) vardec -> . type iddec
    (36) arraydec -> . ARRAY type ID newline
    (37) arraydec -> . ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline
    (38) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM
    (39) functiondec -> . FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline
    (43) functiondefn -> . functiondec newline BEGIN block returnstatement END newline
    (44) structuredec -> . STRUCTURE ID newline BEGIN newline decs END newline
    (45) literal -> . STRINGLITERAL
    (46) literal -> . INTEGERLITERAL
    (47) literal -> . CHARLITERAL
    (48) literal -> . DECIMALLITERAL
    (49) literal -> . TRUE
    (50) literal -> . FALSE
    (91) type -> . INTEGER
    (92) type -> . CHAR
    (93) type -> . STRING
    (94) type -> . BOOLEAN
    (95) type -> . DECIMAL

  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DO resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for OPENPARAM resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRUCTURE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRINGLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGERLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHARLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMALLITERAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for CHAR resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 15 (block -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (block -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for OPENPARAM resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for STRINGLITERAL resolved as shift
  ! shift/reduce conflict for INTEGERLITERAL resolved as shift
  ! shift/reduce conflict for CHARLITERAL resolved as shift
  ! shift/reduce conflict for DECIMALLITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
    $end            reduce using rule 15 (block -> statement .)
    ELSE            reduce using rule 15 (block -> statement .)
    CONTINUE        shift and go to state 51
    BREAK           shift and go to state 50
    IF              shift and go to state 45
    WHILE           shift and go to state 18
    DO              shift and go to state 7
    RETURN          shift and go to state 9
    NEWLINE         shift and go to state 4
    OPENPARAM       shift and go to state 13
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 48
    NOT             shift and go to state 54
    PLUS            shift and go to state 28
    MINUS           shift and go to state 21
    PERCENTAGE      shift and go to state 31
    ID              shift and go to state 44
    ARRAY           shift and go to state 14
    FUNCTION        shift and go to state 34
    STRUCTURE       shift and go to state 53
    STRINGLITERAL   shift and go to state 15
    INTEGERLITERAL  shift and go to state 37
    CHARLITERAL     shift and go to state 23
    DECIMALLITERAL  shift and go to state 30
    TRUE            shift and go to state 20
    FALSE           shift and go to state 47
    INTEGER         shift and go to state 41
    CHAR            shift and go to state 46
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 17
    DECIMAL         shift and go to state 38

  ! CONTINUE        [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! BREAK           [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! IF              [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! DO              [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! RETURN          [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! NEWLINE         [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! OPENPARAM       [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! INCREMENT       [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! DECREMENT       [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! NOT             [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! PLUS            [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! MINUS           [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! PERCENTAGE      [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! ID              [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! ARRAY           [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! FUNCTION        [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! STRUCTURE       [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! STRINGLITERAL   [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! CHARLITERAL     [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! TRUE            [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! FALSE           [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! INTEGER         [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! CHAR            [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! STRING          [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! BOOLEAN         [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! DECIMAL         [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! $end            [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! ELSE            [ reduce using rule 18 (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement .) ]
  ! CONTINUE        [ reduce using rule 15 (block -> statement .) ]
  ! BREAK           [ reduce using rule 15 (block -> statement .) ]
  ! IF              [ reduce using rule 15 (block -> statement .) ]
  ! WHILE           [ reduce using rule 15 (block -> statement .) ]
  ! DO              [ reduce using rule 15 (block -> statement .) ]
  ! RETURN          [ reduce using rule 15 (block -> statement .) ]
  ! NEWLINE         [ reduce using rule 15 (block -> statement .) ]
  ! OPENPARAM       [ reduce using rule 15 (block -> statement .) ]
  ! INCREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! DECREMENT       [ reduce using rule 15 (block -> statement .) ]
  ! NOT             [ reduce using rule 15 (block -> statement .) ]
  ! PLUS            [ reduce using rule 15 (block -> statement .) ]
  ! MINUS           [ reduce using rule 15 (block -> statement .) ]
  ! PERCENTAGE      [ reduce using rule 15 (block -> statement .) ]
  ! ID              [ reduce using rule 15 (block -> statement .) ]
  ! ARRAY           [ reduce using rule 15 (block -> statement .) ]
  ! FUNCTION        [ reduce using rule 15 (block -> statement .) ]
  ! STRUCTURE       [ reduce using rule 15 (block -> statement .) ]
  ! STRINGLITERAL   [ reduce using rule 15 (block -> statement .) ]
  ! INTEGERLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! CHARLITERAL     [ reduce using rule 15 (block -> statement .) ]
  ! DECIMALLITERAL  [ reduce using rule 15 (block -> statement .) ]
  ! TRUE            [ reduce using rule 15 (block -> statement .) ]
  ! FALSE           [ reduce using rule 15 (block -> statement .) ]
  ! INTEGER         [ reduce using rule 15 (block -> statement .) ]
  ! CHAR            [ reduce using rule 15 (block -> statement .) ]
  ! STRING          [ reduce using rule 15 (block -> statement .) ]
  ! BOOLEAN         [ reduce using rule 15 (block -> statement .) ]
  ! DECIMAL         [ reduce using rule 15 (block -> statement .) ]
  ! CONTINUE        [ reduce using rule 96 (empty -> .) ]
  ! BREAK           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! DO              [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 96 (empty -> .) ]
  ! OPENPARAM       [ reduce using rule 96 (empty -> .) ]
  ! INCREMENT       [ reduce using rule 96 (empty -> .) ]
  ! DECREMENT       [ reduce using rule 96 (empty -> .) ]
  ! NOT             [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! PERCENTAGE      [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! ARRAY           [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! STRUCTURE       [ reduce using rule 96 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 96 (empty -> .) ]
  ! INTEGERLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 96 (empty -> .) ]
  ! DECIMALLITERAL  [ reduce using rule 96 (empty -> .) ]
  ! TRUE            [ reduce using rule 96 (empty -> .) ]
  ! FALSE           [ reduce using rule 96 (empty -> .) ]
  ! INTEGER         [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 96 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 96 (empty -> .) ]
  ! $end            [ reduce using rule 96 (empty -> .) ]
  ! ELSE            [ reduce using rule 96 (empty -> .) ]

    arraydec                       shift and go to state 11
    primaryexpression              shift and go to state 10
    dowhilestatement               shift and go to state 12
    memberaccess                   shift and go to state 16
    decs                           shift and go to state 22
    vardec                         shift and go to state 8
    whilestatement                 shift and go to state 24
    literal                        shift and go to state 25
    statement                      shift and go to state 65
    type                           shift and go to state 32
    structuredec                   shift and go to state 49
    empty                          shift and go to state 33
    unaryop                        shift and go to state 36
    newline                        shift and go to state 39
    simplestatement                shift and go to state 40
    indexaccess                    shift and go to state 42
    functiondec                    shift and go to state 43
    functiondefn                   shift and go to state 26
    functioncall                   shift and go to state 52
    returnstatement                shift and go to state 55
    dec                            shift and go to state 56
    expression                     shift and go to state 57
    block                          shift and go to state 66
    ifstatement                    shift and go to state 59

state 161

    (44) structuredec -> STRUCTURE ID newline BEGIN newline decs END . newline
    (3) newline -> . NEWLINE newline
    (4) newline -> . NEWLINE

    NEWLINE         shift and go to state 4

    newline                        shift and go to state 163

state 162

    (37) arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline .

    NEWLINE         reduce using rule 37 (arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline .)


state 163

    (44) structuredec -> STRUCTURE ID newline BEGIN newline decs END newline .

    NEWLINE         reduce using rule 44 (structuredec -> STRUCTURE ID newline BEGIN newline decs END newline .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 5 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for DO in state 5 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 5 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for NOT in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 5 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 5 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 5 resolved as shift
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 5 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 5 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 5 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 5 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 5 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 5 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 5 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 5 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 7 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for DO in state 7 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 7 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 7 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 7 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 7 resolved as shift
WARNING: shift/reduce conflict for NOT in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 7 resolved as shift
WARNING: shift/reduce conflict for ID in state 7 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 7 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 7 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 7 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 7 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 7 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 7 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 7 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 7 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING in state 7 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 7 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 7 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 29 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 29 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for DO in state 29 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 29 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 29 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 29 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for DO in state 29 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 29 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 29 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 29 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 29 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 29 resolved as shift
WARNING: shift/reduce conflict for NOT in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 29 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 29 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 29 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 29 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 29 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 29 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 29 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 29 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 29 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 29 resolved as shift
WARNING: shift/reduce conflict for STRING in state 29 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 29 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 29 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 43 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 44 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 57 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 60 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for DO in state 60 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 60 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 60 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for DO in state 60 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 60 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 60 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 60 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 60 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 60 resolved as shift
WARNING: shift/reduce conflict for NOT in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 60 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 60 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 60 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 60 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 60 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 60 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 60 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 60 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 60 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 60 resolved as shift
WARNING: shift/reduce conflict for STRING in state 60 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 60 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 60 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 65 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for DO in state 65 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 65 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 65 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for DO in state 65 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 65 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 65 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 65 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 65 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 65 resolved as shift
WARNING: shift/reduce conflict for NOT in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 65 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 65 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 65 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 65 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 65 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 65 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 65 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 65 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 65 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 65 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 65 resolved as shift
WARNING: shift/reduce conflict for STRING in state 65 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 65 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 65 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 70 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 70 resolved as shift
WARNING: shift/reduce conflict for OPENARRAY in state 70 resolved as shift
WARNING: shift/reduce conflict for OF in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LTE in state 70 resolved as shift
WARNING: shift/reduce conflict for GTE in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMPARISON in state 70 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 70 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 77 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 77 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 77 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 77 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 77 resolved as shift
WARNING: shift/reduce conflict for STRING in state 77 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 77 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 77 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 106 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 106 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for DO in state 106 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 106 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 106 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 106 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 106 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 106 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 106 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 106 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 106 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 106 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 106 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 106 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 106 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 106 resolved as shift
WARNING: shift/reduce conflict for STRING in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 106 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 108 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for OPENARRAY in state 115 resolved as shift
WARNING: shift/reduce conflict for OF in state 115 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LTE in state 115 resolved as shift
WARNING: shift/reduce conflict for GTE in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMPARISON in state 115 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 115 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 126 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 131 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 131 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: shift/reduce conflict for DO in state 131 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 131 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 131 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 131 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 131 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 131 resolved as shift
WARNING: shift/reduce conflict for NOT in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 131 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 131 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 131 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 131 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 131 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 131 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 131 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 131 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 131 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 131 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 131 resolved as shift
WARNING: shift/reduce conflict for STRING in state 131 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 131 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 131 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 136 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 136 resolved as shift
WARNING: shift/reduce conflict for DO in state 136 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 136 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 136 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 136 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 136 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 136 resolved as shift
WARNING: shift/reduce conflict for NOT in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 136 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 136 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 136 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 136 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 136 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 136 resolved as shift
WARNING: shift/reduce conflict for STRING in state 136 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 136 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 136 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 139 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 145 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for DO in state 145 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 145 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 145 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for DO in state 145 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 145 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 145 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 145 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 145 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 145 resolved as shift
WARNING: shift/reduce conflict for NOT in state 145 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 145 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 145 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 145 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 145 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 145 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 145 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 145 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 145 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 145 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 145 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 145 resolved as shift
WARNING: shift/reduce conflict for STRING in state 145 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 145 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 145 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 149 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 149 resolved as shift
WARNING: shift/reduce conflict for IF in state 149 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 149 resolved as shift
WARNING: shift/reduce conflict for DO in state 149 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 149 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 149 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 149 resolved as shift
WARNING: shift/reduce conflict for IF in state 149 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 149 resolved as shift
WARNING: shift/reduce conflict for DO in state 149 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 149 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 149 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 149 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 149 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 149 resolved as shift
WARNING: shift/reduce conflict for NOT in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 149 resolved as shift
WARNING: shift/reduce conflict for ID in state 149 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 149 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 149 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 149 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 149 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 149 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 149 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 149 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 149 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 149 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 149 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 149 resolved as shift
WARNING: shift/reduce conflict for STRING in state 149 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 149 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 149 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 154 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for DO in state 154 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 154 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 154 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 154 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 154 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 154 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 154 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 154 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 154 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 154 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 154 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 154 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 154 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 154 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 154 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 154 resolved as shift
WARNING: shift/reduce conflict for STRING in state 154 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 154 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 154 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 156 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for DO in state 156 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 156 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 156 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for DO in state 156 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 156 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 156 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 156 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 156 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 156 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 156 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 156 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 156 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 156 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 156 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 156 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 156 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 156 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 156 resolved as shift
WARNING: shift/reduce conflict for STRING in state 156 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 156 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 156 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 160 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for DO in state 160 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 160 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 160 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for DO in state 160 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 160 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 160 resolved as shift
WARNING: shift/reduce conflict for OPENPARAM in state 160 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 160 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 160 resolved as shift
WARNING: shift/reduce conflict for NOT in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 160 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 160 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 160 resolved as shift
WARNING: shift/reduce conflict for STRINGLITERAL in state 160 resolved as shift
WARNING: shift/reduce conflict for INTEGERLITERAL in state 160 resolved as shift
WARNING: shift/reduce conflict for CHARLITERAL in state 160 resolved as shift
WARNING: shift/reduce conflict for DECIMALLITERAL in state 160 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 160 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 160 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 160 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 160 resolved as shift
WARNING: shift/reduce conflict for STRING in state 160 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 160 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 160 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (program -> statement)
WARNING: rejected rule (block -> statement) in state 29
WARNING: reduce/reduce conflict in state 29 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 29
WARNING: reduce/reduce conflict in state 29 resolved using rule (program -> statement)
WARNING: rejected rule (empty -> <empty>) in state 29
WARNING: reduce/reduce conflict in state 60 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 60
WARNING: reduce/reduce conflict in state 65 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 65
WARNING: reduce/reduce conflict in state 66 resolved using rule (statement -> block)
WARNING: rejected rule (block -> statement block) in state 66
WARNING: reduce/reduce conflict in state 98 resolved using rule (returnstatement -> RETURN expression newline)
WARNING: rejected rule (expression -> expression newline) in state 98
WARNING: reduce/reduce conflict in state 145 resolved using rule (block -> statement)
WARNING: rejected rule (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement) in state 145
WARNING: reduce/reduce conflict in state 145 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 145
WARNING: reduce/reduce conflict in state 149 resolved using rule (block -> statement)
WARNING: rejected rule (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement) in state 149
WARNING: reduce/reduce conflict in state 149 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 149
WARNING: reduce/reduce conflict in state 156 resolved using rule (dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline)
WARNING: rejected rule (empty -> <empty>) in state 156
WARNING: reduce/reduce conflict in state 160 resolved using rule (block -> statement)
WARNING: rejected rule (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement) in state 160
WARNING: reduce/reduce conflict in state 160 resolved using rule (block -> statement)
WARNING: rejected rule (empty -> <empty>) in state 160
WARNING: Rule (block -> statement block) is never reduced
WARNING: Rule (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement) is never reduced
WARNING: Rule (whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement) is never reduced
WARNING: Rule (ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement) is never reduced

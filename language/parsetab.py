
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BEGIN BOOLEAN BREAK CHAR CHARLITERAL CLOSEARRAY CLOSEBLOCK CLOSEPARAM COMMA CONTINUE DECIMAL DECIMALLITERAL DECREMENT DIVIDE DO ELSE END EQUALCOMPARISON EQUALS FALSE FUNCTION GT GTE ID IF INCREMENT INTEGER INTEGERLITERAL LT LTE MINUS MODULO MULTIPLY NEWLINE NOT NOTEQUALS OF OPENARRAY OPENBLOCK OPENPARAM OR PERCENTAGE PLUS PROBLEM RETURN STRING STRINGLITERAL STRUCTURE TRUE WHILEstart : PROBLEM ID newline programprogram : statement\n\tnewline : NEWLINE newline\n\t\t   | NEWLINE\n\t\n\tstatement : block\n\t\t\t | ifstatement \n\t\t\t | whilestatement \n\t\t\t | dowhilestatement\n\t\t\t | CONTINUE newline\n\t\t\t | BREAK newline\n\t\t\t | returnstatement\n\t\t\t | simplestatement\n\t\t\t | empty\n\t\t\t | newline\n\t\n\tblock : statement\n\t\t | statement block\n\t\n\tifstatement : IF OPENPARAM expression CLOSEPARAM statement\n\t\t\t   | IF OPENPARAM expression CLOSEPARAM statement ELSE statement\n\t\n\twhilestatement : WHILE OPENPARAM expression CLOSEPARAM newline statement\n\tdowhilestatement : DO statement WHILE OPENPARAM expression CLOSEPARAM newlinereturnstatement : RETURN expression newline\n\tsimplestatement : decs\n\t\t\t\t\t| expression\n\t\n\tdecs : dec newline decs\n\t\t| dec newline\n\t\n\tdec : vardec\n\t\t| arraydec\n\t\t| functiondec\n\t\t| functiondefn\n\t\t| structuredec\n\tvardec : type iddec\n\tiddec : ID newline\n\t\t| ID COMMA iddec\n\t\t| ID EQUALS literal newline\n\t\t| ID EQUALS literal COMMA iddec\n\t\n\tarraydec : ARRAY type ID newline\n\t\t\t| ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline\n\t\n\tfunctiondec : FUNCTION ID OPENPARAM paramlist CLOSEPARAM\n\t\t\t   | FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline\n\t\n\tparamlist : type ID\n\t\t\t\t| type ID COMMA paramlist\n\t\t\t\t| empty\n\t\n\tfunctiondefn : functiondec newline BEGIN block returnstatement END newline\n\tstructuredec : STRUCTURE ID newline BEGIN newline decs END newline\n\tliteral : STRINGLITERAL\n\t\t   | INTEGERLITERAL\n\t\t   | CHARLITERAL\n\t\t   | DECIMALLITERAL\n\t\t   | TRUE\n\t\t   | FALSE\n\t\n\tliteralslist : literal\n\t\t\t\t| literal COMMA literalslist\n\t\n\texpression : expression INCREMENT\n\t\t\t  | expression DECREMENT\n\t\t\t  | unaryop expression\n\t\t\t  | indexaccess\n\t\t\t  | memberaccess\n\t\t\t  | functioncall\n\t\t\t  | OPENPARAM expression CLOSEPARAM\n\t\t\t  | expression biop expression\n\t\t\t  | primaryexpression\n\t\t\t  | expression newline\n\t\n\tunaryop : INCREMENT\n\t\t   | DECREMENT\n\t\t   | NOT\n\t\t   | PLUS\n\t\t   | MINUS\n\t\t   | PERCENTAGE\n\t\n\tbiop : MULTIPLY\n\t\t| DIVIDE\n\t\t| MODULO\n\t\t| PLUS\n\t\t| MINUS\n\t\t| AND\n\t\t| OR\n\t\t| LT\n\t\t| GT\n\t\t| LTE\n\t\t| GTE\n\t\t| EQUALCOMPARISON\n\t\t| NOTEQUALS\n\tindexaccess : expression OPENARRAY expression CLOSEARRAYmemberaccess : expression OF IDfunctioncall : ID OPENPARAM callarguments CLOSEPARAM\n\tcallarguments : ID\n\t\t\t\t | literalslist\n\t\t\t\t | ID COMMA callarguments\n\t\t\t\t | literalslist COMMA callarguments\n\t\n\tprimaryexpression : literal\n\t\t\t\t\t | ID\n\t\n\ttype : INTEGER\n\t\t| CHAR\n\t\t| STRING\n\t\t| BOOLEAN\n\t\t| DECIMAL\n\tempty : '
    
_lr_action_items = {'DO':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,7,-3,7,-61,-8,-45,-57,-49,-22,-47,-7,-89,7,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,7,7,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,7,-24,-60,-83,-5,-84,7,-82,7,7,7,7,7,7,]),'RETURN':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,9,-3,9,-61,-8,-45,-57,-49,-22,-47,-7,-89,9,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,9,9,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,9,-24,-60,-83,9,-84,9,-82,9,9,9,9,9,9,]),'NOTEQUALS':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,78,78,78,78,-53,-62,-54,-62,-59,78,78,78,78,-83,-84,-82,78,]),'OPENPARAM':([4,5,6,7,9,10,12,13,15,16,18,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,45,47,48,52,54,55,57,58,59,60,64,65,66,69,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,106,113,115,116,117,126,127,131,133,136,145,149,154,156,160,],[-4,13,-3,13,13,-61,-8,13,-45,-57,64,-49,-67,-22,-47,-7,-89,-66,13,-48,-68,-13,-63,13,-46,-14,-12,-56,72,73,-50,-64,-58,-65,-11,-23,-5,-6,13,13,13,-5,105,-55,13,-10,-9,-25,-81,-69,-73,13,-79,13,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,117,-21,-59,13,-24,-60,-83,13,-5,-84,13,-82,13,13,13,13,13,13,]),'STRINGLITERAL':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,15,-3,15,15,-61,-8,15,-45,-57,-49,-67,-22,-47,-7,-89,-66,15,-48,-68,-13,-63,15,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,15,15,15,-5,-55,15,15,-10,-9,-25,-81,-69,-73,15,-79,15,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,15,15,-24,-60,-83,15,-5,-84,15,15,15,15,-82,15,15,15,15,15,15,15,]),'CHAR':([4,5,6,7,10,12,14,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,105,106,113,115,116,126,127,131,133,136,145,146,149,152,154,156,160,],[-4,46,-3,46,-61,-8,46,-45,-57,-49,-22,-47,-7,-89,46,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,46,46,-5,-55,-10,-9,46,-53,-62,-54,-21,-59,46,46,-24,-60,-83,-5,-84,46,-82,46,46,46,46,46,46,46,46,]),'WHILE':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,18,-3,18,-61,-8,-45,-57,-49,-22,-47,-7,-89,18,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,97,18,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,18,-24,-60,-83,-5,-84,18,-82,18,18,18,18,18,18,]),'MULTIPLY':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,79,79,79,79,-53,-62,-54,-62,-59,79,79,79,79,-83,-84,-82,79,]),'END':([4,6,77,98,113,141,155,],[-4,-3,-25,-21,-24,153,161,]),'TRUE':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,20,-3,20,20,-61,-8,20,-45,-57,-49,-67,-22,-47,-7,-89,-66,20,-48,-68,-13,-63,20,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,20,20,20,-5,-55,20,20,-10,-9,-25,-81,-69,-73,20,-79,20,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,20,20,-24,-60,-83,20,-5,-84,20,20,20,20,-82,20,20,20,20,20,20,20,]),'INTEGERLITERAL':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,37,-3,37,37,-61,-8,37,-45,-57,-49,-67,-22,-47,-7,-89,-66,37,-48,-68,-13,-63,37,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,37,37,37,-5,-55,37,37,-10,-9,-25,-81,-69,-73,37,-79,37,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,37,37,-24,-60,-83,37,-5,-84,37,37,37,37,-82,37,37,37,37,37,37,37,]),'OPENARRAY':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,119,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,81,81,81,81,-53,-62,-54,-62,-59,81,81,81,81,-83,135,-84,-82,81,]),'STRING':([4,5,6,7,10,12,14,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,105,106,113,115,116,126,127,131,133,136,145,146,149,152,154,156,160,],[-4,19,-3,19,-61,-8,19,-45,-57,-49,-22,-47,-7,-89,19,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,19,19,-5,-55,-10,-9,19,-53,-62,-54,-21,-59,19,19,-24,-60,-83,-5,-84,19,-82,19,19,19,19,19,19,19,19,]),'BEGIN':([4,6,71,112,],[-4,-3,106,132,]),'PERCENTAGE':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,106,113,115,116,117,126,127,131,133,136,145,149,154,156,160,],[-4,31,-3,31,31,-61,-8,31,-45,-57,-49,-67,-22,-47,-7,-89,-66,31,-48,-68,-13,-63,31,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,31,31,31,-5,-55,31,-10,-9,-25,-81,-69,-73,31,-79,31,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,31,-24,-60,-83,31,-5,-84,31,-82,31,31,31,31,31,31,]),'CHARLITERAL':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,23,-3,23,23,-61,-8,23,-45,-57,-49,-67,-22,-47,-7,-89,-66,23,-48,-68,-13,-63,23,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,23,23,23,-5,-55,23,23,-10,-9,-25,-81,-69,-73,23,-79,23,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,23,23,-24,-60,-83,23,-5,-84,23,23,23,23,-82,23,23,23,23,23,23,23,]),'NEWLINE':([3,4,5,6,7,8,10,11,12,15,16,20,22,23,24,25,26,29,30,33,37,39,40,42,43,44,47,49,50,51,52,55,56,57,58,59,60,61,62,65,66,67,68,70,74,75,76,77,86,90,95,98,99,100,101,102,106,111,113,114,115,116,118,120,121,122,126,127,131,132,133,134,136,137,139,145,147,149,150,151,153,154,156,157,159,160,161,162,163,],[4,4,4,-3,4,-26,-61,-27,-8,-45,-57,-49,-22,-47,-7,-89,-29,4,-48,-13,-46,-14,-12,-56,4,-90,-50,-30,4,4,-58,-11,4,4,-5,-6,4,4,4,4,-5,-31,4,4,-10,-9,4,-25,-53,-62,-54,-21,-59,4,4,-32,4,4,-24,4,4,-83,-36,4,4,-33,-5,-84,4,4,-82,4,4,-34,4,4,4,4,-35,-39,4,4,4,4,-43,4,4,-37,-44,]),'MINUS':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,61,62,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,101,106,111,113,114,115,116,117,126,127,131,133,134,136,145,149,154,156,160,],[-4,21,-3,21,21,-61,-8,21,-45,-57,-49,-67,-22,-47,-7,-89,-66,21,-48,-68,-13,-63,21,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,80,-5,-6,21,80,80,21,21,-5,80,21,-10,-9,-25,-81,-69,-73,21,-79,21,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,80,21,80,-24,80,80,-83,21,-5,-84,21,-82,80,21,21,21,21,21,21,]),'LT':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,84,84,84,84,-53,-62,-54,-62,-59,84,84,84,84,-83,-84,-82,84,]),'CONTINUE':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,51,-3,51,-61,-8,-45,-57,-49,-22,-47,-7,-89,51,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,51,51,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,51,-24,-60,-83,-5,-84,51,-82,51,51,51,51,51,51,]),'PLUS':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,61,62,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,101,106,111,113,114,115,116,117,126,127,131,133,134,136,145,149,154,156,160,],[-4,28,-3,28,28,-61,-8,28,-45,-57,-49,-67,-22,-47,-7,-89,-66,28,-48,-68,-13,-63,28,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,85,-5,-6,28,85,85,28,28,-5,85,28,-10,-9,-25,-81,-69,-73,28,-79,28,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,85,28,85,-24,85,85,-83,28,-5,-84,28,-82,85,28,28,28,28,28,28,]),'INCREMENT':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,61,62,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,101,106,111,113,114,115,116,117,126,127,131,133,134,136,145,149,154,156,160,],[-4,35,-3,35,35,-61,-8,35,-45,-57,-49,-67,-22,-47,-7,-89,-66,35,-48,-68,-13,-63,35,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,86,-5,-6,35,86,86,35,35,-5,86,35,-10,-9,-25,-81,-69,-73,35,-79,35,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,86,35,86,-24,86,86,-83,35,-5,-84,35,-82,86,35,35,35,35,35,35,]),'INTEGER':([4,5,6,7,10,12,14,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,105,106,113,115,116,126,127,131,133,136,145,146,149,152,154,156,160,],[-4,41,-3,41,-61,-8,41,-45,-57,-49,-22,-47,-7,-89,41,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,41,41,-5,-55,-10,-9,41,-53,-62,-54,-21,-59,41,41,-24,-60,-83,-5,-84,41,-82,41,41,41,41,41,41,41,41,]),'ARRAY':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,146,149,154,156,160,],[-4,14,-3,14,-61,-8,-45,-57,-49,-22,-47,-7,-89,14,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,14,14,-5,-55,-10,-9,14,-53,-62,-54,-21,-59,14,-24,-60,-83,-5,-84,14,-82,14,14,14,14,14,14,14,]),'CLOSEPARAM':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,62,70,86,90,95,99,101,105,107,108,109,110,111,115,116,123,125,127,133,134,140,142,143,144,152,158,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,99,-55,-53,-62,-54,-59,120,-96,127,-51,-86,-85,131,-60,-83,139,-42,-84,-82,147,-40,-52,-88,-87,-96,-41,]),'$end':([1,4,5,6,10,12,15,16,20,22,23,24,25,27,29,30,33,37,39,40,42,44,47,52,55,57,58,59,65,66,70,74,75,77,86,90,95,98,99,113,115,116,127,131,133,136,145,149,154,156,160,],[0,-4,-96,-3,-61,-8,-45,-57,-49,-22,-47,-7,-89,-1,-2,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,-15,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,-24,-60,-83,-84,-96,-82,-96,-15,-15,-96,-20,-15,]),'FUNCTION':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,146,149,154,156,160,],[-4,34,-3,34,-61,-8,-45,-57,-49,-22,-47,-7,-89,34,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,34,34,-5,-55,-10,-9,34,-53,-62,-54,-21,-59,34,-24,-60,-83,-5,-84,34,-82,34,34,34,34,34,34,34,]),'GT':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,87,87,87,87,-53,-62,-54,-62,-59,87,87,87,87,-83,-84,-82,87,]),'MODULO':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,88,88,88,88,-53,-62,-54,-62,-59,88,88,88,88,-83,-84,-82,88,]),'DIVIDE':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,89,89,89,89,-53,-62,-54,-62,-59,89,89,89,89,-83,-84,-82,89,]),'CLOSEARRAY':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,70,86,90,95,99,108,114,115,116,127,133,142,148,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,-55,-53,-62,-54,-59,-51,133,-60,-83,-84,-82,-52,157,]),'DECIMAL':([4,5,6,7,10,12,14,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,105,106,113,115,116,126,127,131,133,136,145,146,149,152,154,156,160,],[-4,38,-3,38,-61,-8,38,-45,-57,-49,-22,-47,-7,-89,38,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,38,38,-5,-55,-10,-9,38,-53,-62,-54,-21,-59,38,38,-24,-60,-83,-5,-84,38,-82,38,38,38,38,38,38,38,38,]),'EQUALS':([68,100,],[103,119,]),'ELSE':([4,6,10,12,15,16,20,22,23,24,25,30,33,37,39,40,42,44,47,52,55,57,58,59,65,66,70,74,75,77,86,90,95,98,99,113,115,116,127,131,133,136,145,149,154,156,160,],[-4,-3,-61,-8,-45,-57,-49,-22,-47,-7,-89,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,-15,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,-24,-60,-83,-84,-96,-82,-96,154,-15,-96,-20,-15,]),'LTE':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,91,91,91,91,-53,-62,-54,-62,-59,91,91,91,91,-83,-84,-82,91,]),'PROBLEM':([0,],[2,]),'ID':([2,4,5,6,7,9,10,12,13,15,16,17,19,20,21,22,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,47,48,52,53,54,55,57,58,59,60,63,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,104,106,113,115,116,117,124,126,127,129,130,131,133,136,138,145,149,154,156,160,],[3,-4,44,-3,44,44,-61,-8,44,-45,-57,-94,-93,-49,-67,-22,-47,-7,-89,-66,44,-48,-68,68,-13,69,-63,44,-46,-95,-14,-12,-91,-56,-90,-92,-50,-64,-58,76,-65,-11,-23,-5,-6,44,100,44,44,-5,-55,110,44,-10,-9,-25,-81,-69,-73,44,-79,44,-76,-72,-53,-77,-71,-70,-62,-78,-74,116,-80,-54,-75,-21,-59,68,44,-24,-60,-83,44,140,-5,-84,110,110,44,-82,44,68,44,44,44,44,44,]),'IF':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,45,-3,45,-61,-8,-45,-57,-49,-22,-47,-7,-89,45,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,45,45,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,45,-24,-60,-83,-5,-84,45,-82,45,45,45,45,45,45,]),'AND':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,92,92,92,92,-53,-62,-54,-62,-59,92,92,92,92,-83,-84,-82,92,]),'FALSE':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,47,-3,47,47,-61,-8,47,-45,-57,-49,-67,-22,-47,-7,-89,-66,47,-48,-68,-13,-63,47,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,47,47,47,-5,-55,47,47,-10,-9,-25,-81,-69,-73,47,-79,47,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,47,47,-24,-60,-83,47,-5,-84,47,47,47,47,-82,47,47,47,47,47,47,47,]),'OF':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,93,93,93,93,-53,-62,-54,-62,-59,93,93,93,93,-83,-84,-82,93,]),'GTE':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,82,82,82,82,-53,-62,-54,-62,-59,82,82,82,82,-83,-84,-82,82,]),'EQUALCOMPARISON':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,94,94,94,94,-53,-62,-54,-62,-59,94,94,94,94,-83,-84,-82,94,]),'BREAK':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,149,154,156,160,],[-4,50,-3,50,-61,-8,-45,-57,-49,-22,-47,-7,-89,50,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,50,50,-5,-55,-10,-9,-25,-53,-62,-54,-21,-59,50,-24,-60,-83,-5,-84,50,-82,50,50,50,50,50,50,]),'BOOLEAN':([4,5,6,7,10,12,14,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,105,106,113,115,116,126,127,131,133,136,145,146,149,152,154,156,160,],[-4,17,-3,17,-61,-8,17,-45,-57,-49,-22,-47,-7,-89,17,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,17,17,-5,-55,-10,-9,17,-53,-62,-54,-21,-59,17,17,-24,-60,-83,-5,-84,17,-82,17,17,17,17,17,17,17,17,]),'DECIMALLITERAL':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,103,106,113,115,116,117,126,127,128,129,130,131,133,135,136,145,149,154,156,160,],[-4,30,-3,30,30,-61,-8,30,-45,-57,-49,-67,-22,-47,-7,-89,-66,30,-48,-68,-13,-63,30,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,30,30,30,-5,-55,30,30,-10,-9,-25,-81,-69,-73,30,-79,30,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,30,30,-24,-60,-83,30,-5,-84,30,30,30,30,-82,30,30,30,30,30,30,30,]),'NOT':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,106,113,115,116,117,126,127,131,133,136,145,149,154,156,160,],[-4,54,-3,54,54,-61,-8,54,-45,-57,-49,-67,-22,-47,-7,-89,-66,54,-48,-68,-13,-63,54,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,-23,-5,-6,54,54,54,-5,-55,54,-10,-9,-25,-81,-69,-73,54,-79,54,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,54,-24,-60,-83,54,-5,-84,54,-82,54,54,54,54,54,54,]),'DECREMENT':([4,5,6,7,9,10,12,13,15,16,20,21,22,23,24,25,28,29,30,31,33,35,36,37,39,40,42,44,47,48,52,54,55,57,58,59,60,61,62,64,65,66,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,99,101,106,111,113,114,115,116,117,126,127,131,133,134,136,145,149,154,156,160,],[-4,48,-3,48,48,-61,-8,48,-45,-57,-49,-67,-22,-47,-7,-89,-66,48,-48,-68,-13,-63,48,-46,-14,-12,-56,-90,-50,-64,-58,-65,-11,95,-5,-6,48,95,95,48,48,-5,95,48,-10,-9,-25,-81,-69,-73,48,-79,48,-76,-72,-53,-77,-71,-70,-62,-78,-74,-80,-54,-75,-21,-59,95,48,95,-24,95,95,-83,48,-5,-84,48,-82,95,48,48,48,48,48,48,]),'COMMA':([15,20,23,30,37,47,68,108,109,110,121,140,142,],[-45,-49,-47,-48,-46,-50,104,128,129,130,138,152,-52,]),'OR':([4,6,10,15,16,20,23,25,30,37,42,44,47,52,57,61,62,70,86,90,95,98,99,101,111,114,115,116,127,133,134,],[-4,-3,-61,-45,-57,-49,-47,-89,-48,-46,-56,-90,-50,-58,96,96,96,96,-53,-62,-54,-62,-59,96,96,96,96,-83,-84,-82,96,]),'STRUCTURE':([4,5,6,7,10,12,15,16,20,22,23,24,25,29,30,33,37,39,40,42,44,47,52,55,57,58,59,60,65,66,70,74,75,77,86,90,95,98,99,106,113,115,116,126,127,131,133,136,145,146,149,154,156,160,],[-4,53,-3,53,-61,-8,-45,-57,-49,-22,-47,-7,-89,53,-48,-13,-46,-14,-12,-56,-90,-50,-58,-11,-23,-5,-6,53,53,-5,-55,-10,-9,53,-53,-62,-54,-21,-59,53,-24,-60,-83,-5,-84,53,-82,53,53,53,53,53,53,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arraydec':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'primaryexpression':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'callarguments':([72,129,130,],[107,143,144,]),'dowhilestatement':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'iddec':([32,104,138,],[67,122,150,]),'memberaccess':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'decs':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[22,22,22,22,22,113,22,22,22,22,155,22,22,22,22,]),'vardec':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'whilestatement':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'biop':([57,61,62,70,101,111,114,115,134,],[83,83,83,83,83,83,83,83,83,]),'start':([0,],[1,]),'literal':([5,7,9,13,29,36,60,64,65,72,73,81,83,103,106,117,128,129,130,131,135,136,145,149,154,156,160,],[25,25,25,25,25,25,25,25,25,108,25,25,25,121,25,25,108,108,108,25,108,25,25,25,25,25,25,]),'program':([5,],[27,]),'statement':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[29,60,65,65,65,65,145,149,65,65,160,149,65,]),'literalslist':([72,128,129,130,135,],[109,142,109,109,148,]),'type':([5,7,14,29,60,65,77,105,106,131,136,145,146,149,152,154,156,160,],[32,32,63,32,32,32,32,124,32,32,32,32,32,32,124,32,32,32,]),'structuredec':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'empty':([5,7,29,60,65,105,106,131,136,145,149,152,154,156,160,],[33,33,33,33,33,125,33,33,33,33,33,125,33,33,33,]),'unaryop':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'newline':([3,4,5,7,29,43,50,51,56,57,60,61,62,65,68,70,76,100,101,106,111,114,115,120,121,131,132,134,136,139,145,147,149,153,154,156,157,160,161,],[5,6,39,39,39,71,74,75,77,90,39,98,90,39,102,90,112,118,90,39,90,90,90,136,137,39,146,90,39,151,39,156,39,159,39,39,162,39,163,]),'simplestatement':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[40,40,40,40,40,40,40,40,40,40,40,40,40,]),'paramlist':([105,152,],[123,158,]),'indexaccess':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'functiondec':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'functiondefn':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'functioncall':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'returnstatement':([5,7,29,60,65,106,126,131,136,145,149,154,156,160,],[55,55,55,55,55,55,141,55,55,55,55,55,55,55,]),'dec':([5,7,29,60,65,77,106,131,136,145,146,149,154,156,160,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'expression':([5,7,9,13,29,36,60,64,65,73,81,83,106,117,131,136,145,149,154,156,160,],[57,57,61,62,57,70,57,101,57,111,114,115,57,134,57,57,57,57,57,57,57,]),'block':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[58,58,66,66,66,126,58,58,66,66,58,58,66,]),'ifstatement':([5,7,29,60,65,106,131,136,145,149,154,156,160,],[59,59,59,59,59,59,59,59,59,59,59,59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PROBLEM ID newline program','start',4,'p_start','parser.py',7),
  ('program -> statement','program',1,'p_program','parser.py',11),
  ('newline -> NEWLINE newline','newline',2,'p_newline','parser.py',15),
  ('newline -> NEWLINE','newline',1,'p_newline','parser.py',16),
  ('statement -> block','statement',1,'p_statement','parser.py',21),
  ('statement -> ifstatement','statement',1,'p_statement','parser.py',22),
  ('statement -> whilestatement','statement',1,'p_statement','parser.py',23),
  ('statement -> dowhilestatement','statement',1,'p_statement','parser.py',24),
  ('statement -> CONTINUE newline','statement',2,'p_statement','parser.py',25),
  ('statement -> BREAK newline','statement',2,'p_statement','parser.py',26),
  ('statement -> returnstatement','statement',1,'p_statement','parser.py',27),
  ('statement -> simplestatement','statement',1,'p_statement','parser.py',28),
  ('statement -> empty','statement',1,'p_statement','parser.py',29),
  ('statement -> newline','statement',1,'p_statement','parser.py',30),
  ('block -> statement','block',1,'p_block','parser.py',35),
  ('block -> statement block','block',2,'p_block','parser.py',36),
  ('ifstatement -> IF OPENPARAM expression CLOSEPARAM statement','ifstatement',5,'p_ifstatement','parser.py',41),
  ('ifstatement -> IF OPENPARAM expression CLOSEPARAM statement ELSE statement','ifstatement',7,'p_ifstatement','parser.py',42),
  ('whilestatement -> WHILE OPENPARAM expression CLOSEPARAM newline statement','whilestatement',6,'p_whilestatement','parser.py',47),
  ('dowhilestatement -> DO statement WHILE OPENPARAM expression CLOSEPARAM newline','dowhilestatement',7,'p_dowhilestatement','parser.py',50),
  ('returnstatement -> RETURN expression newline','returnstatement',3,'p_returnstatement','parser.py',54),
  ('simplestatement -> decs','simplestatement',1,'p_simplestatement','parser.py',58),
  ('simplestatement -> expression','simplestatement',1,'p_simplestatement','parser.py',59),
  ('decs -> dec newline decs','decs',3,'p_decs','parser.py',64),
  ('decs -> dec newline','decs',2,'p_decs','parser.py',65),
  ('dec -> vardec','dec',1,'p_dec','parser.py',70),
  ('dec -> arraydec','dec',1,'p_dec','parser.py',71),
  ('dec -> functiondec','dec',1,'p_dec','parser.py',72),
  ('dec -> functiondefn','dec',1,'p_dec','parser.py',73),
  ('dec -> structuredec','dec',1,'p_dec','parser.py',74),
  ('vardec -> type iddec','vardec',2,'p_vardec','parser.py',78),
  ('iddec -> ID newline','iddec',2,'p_iddec','parser.py',82),
  ('iddec -> ID COMMA iddec','iddec',3,'p_iddec','parser.py',83),
  ('iddec -> ID EQUALS literal newline','iddec',4,'p_iddec','parser.py',84),
  ('iddec -> ID EQUALS literal COMMA iddec','iddec',5,'p_iddec','parser.py',85),
  ('arraydec -> ARRAY type ID newline','arraydec',4,'p_arraydec','parser.py',90),
  ('arraydec -> ARRAY type ID EQUALS OPENARRAY literalslist CLOSEARRAY newline','arraydec',8,'p_arraydec','parser.py',91),
  ('functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM','functiondec',5,'p_functiondec','parser.py',96),
  ('functiondec -> FUNCTION ID OPENPARAM paramlist CLOSEPARAM newline','functiondec',6,'p_functiondec','parser.py',97),
  ('paramlist -> type ID','paramlist',2,'p_paramlist','parser.py',102),
  ('paramlist -> type ID COMMA paramlist','paramlist',4,'p_paramlist','parser.py',103),
  ('paramlist -> empty','paramlist',1,'p_paramlist','parser.py',104),
  ('functiondefn -> functiondec newline BEGIN block returnstatement END newline','functiondefn',7,'p_functiondefn','parser.py',109),
  ('structuredec -> STRUCTURE ID newline BEGIN newline decs END newline','structuredec',8,'p_structuredec','parser.py',113),
  ('literal -> STRINGLITERAL','literal',1,'p_literal','parser.py',117),
  ('literal -> INTEGERLITERAL','literal',1,'p_literal','parser.py',118),
  ('literal -> CHARLITERAL','literal',1,'p_literal','parser.py',119),
  ('literal -> DECIMALLITERAL','literal',1,'p_literal','parser.py',120),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',121),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',122),
  ('literalslist -> literal','literalslist',1,'p_literalslist','parser.py',127),
  ('literalslist -> literal COMMA literalslist','literalslist',3,'p_literalslist','parser.py',128),
  ('expression -> expression INCREMENT','expression',2,'p_expression','parser.py',133),
  ('expression -> expression DECREMENT','expression',2,'p_expression','parser.py',134),
  ('expression -> unaryop expression','expression',2,'p_expression','parser.py',135),
  ('expression -> indexaccess','expression',1,'p_expression','parser.py',136),
  ('expression -> memberaccess','expression',1,'p_expression','parser.py',137),
  ('expression -> functioncall','expression',1,'p_expression','parser.py',138),
  ('expression -> OPENPARAM expression CLOSEPARAM','expression',3,'p_expression','parser.py',139),
  ('expression -> expression biop expression','expression',3,'p_expression','parser.py',140),
  ('expression -> primaryexpression','expression',1,'p_expression','parser.py',141),
  ('expression -> expression newline','expression',2,'p_expression','parser.py',142),
  ('unaryop -> INCREMENT','unaryop',1,'p_unaryop','parser.py',147),
  ('unaryop -> DECREMENT','unaryop',1,'p_unaryop','parser.py',148),
  ('unaryop -> NOT','unaryop',1,'p_unaryop','parser.py',149),
  ('unaryop -> PLUS','unaryop',1,'p_unaryop','parser.py',150),
  ('unaryop -> MINUS','unaryop',1,'p_unaryop','parser.py',151),
  ('unaryop -> PERCENTAGE','unaryop',1,'p_unaryop','parser.py',152),
  ('biop -> MULTIPLY','biop',1,'p_biop','parser.py',157),
  ('biop -> DIVIDE','biop',1,'p_biop','parser.py',158),
  ('biop -> MODULO','biop',1,'p_biop','parser.py',159),
  ('biop -> PLUS','biop',1,'p_biop','parser.py',160),
  ('biop -> MINUS','biop',1,'p_biop','parser.py',161),
  ('biop -> AND','biop',1,'p_biop','parser.py',162),
  ('biop -> OR','biop',1,'p_biop','parser.py',163),
  ('biop -> LT','biop',1,'p_biop','parser.py',164),
  ('biop -> GT','biop',1,'p_biop','parser.py',165),
  ('biop -> LTE','biop',1,'p_biop','parser.py',166),
  ('biop -> GTE','biop',1,'p_biop','parser.py',167),
  ('biop -> EQUALCOMPARISON','biop',1,'p_biop','parser.py',168),
  ('biop -> NOTEQUALS','biop',1,'p_biop','parser.py',169),
  ('indexaccess -> expression OPENARRAY expression CLOSEARRAY','indexaccess',4,'p_indexaccess','parser.py',173),
  ('memberaccess -> expression OF ID','memberaccess',3,'p_memberaccess','parser.py',176),
  ('functioncall -> ID OPENPARAM callarguments CLOSEPARAM','functioncall',4,'p_functioncall','parser.py',179),
  ('callarguments -> ID','callarguments',1,'p_callarguments','parser.py',183),
  ('callarguments -> literalslist','callarguments',1,'p_callarguments','parser.py',184),
  ('callarguments -> ID COMMA callarguments','callarguments',3,'p_callarguments','parser.py',185),
  ('callarguments -> literalslist COMMA callarguments','callarguments',3,'p_callarguments','parser.py',186),
  ('primaryexpression -> literal','primaryexpression',1,'p_primaryexpression','parser.py',191),
  ('primaryexpression -> ID','primaryexpression',1,'p_primaryexpression','parser.py',192),
  ('type -> INTEGER','type',1,'p_type','parser.py',197),
  ('type -> CHAR','type',1,'p_type','parser.py',198),
  ('type -> STRING','type',1,'p_type','parser.py',199),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',200),
  ('type -> DECIMAL','type',1,'p_type','parser.py',201),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',206),
]
